diff --git a/README.md b/README.md
index e38556ffa..c8fb038b7 100644
--- a/README.md
+++ b/README.md
@@ -29,6 +29,7 @@ For a more detailed description, and dependencies, visit: https://github.com/tra
     $ tar xf transmission-2.92.tar.xz
     $ cd transmission-2.92
     $ mkdir build
+    $ cd build
     $ cmake ..
     $ make
     $ sudo make install
diff --git a/daemon/daemon.c b/daemon/daemon.c
index 7b2a3b425..81f5c833c 100644
--- a/daemon/daemon.c
+++ b/daemon/daemon.c
@@ -105,6 +105,7 @@ static struct tr_option const options[] =
     { 'C', "no-watch-dir", "Disable the watch-dir", "C", 0, NULL },
     { 941, "incomplete-dir", "Where to store new torrents until they're complete", NULL, 1, "<directory>" },
     { 942, "no-incomplete-dir", "Don't store incomplete torrents in a different location", NULL, 0, NULL },
+    { 943, "default-trackers", "Default trackers to be automatically added to public torrents", NULL, 1, "<list>" },
     { 'd', "dump-settings", "Dump the settings and exit", "d", 0, NULL },
     { 'e', "logfile", "Dump the log messages to this filename", "e", 1, "<filename>" },
     { 'f', "foreground", "Run in the foreground instead of daemonizing", "f", 0, NULL },
@@ -404,6 +405,10 @@ static bool parse_args(int argc, char const** argv, tr_variant* settings, bool*
             tr_variantDictAddBool(settings, TR_KEY_incomplete_dir_enabled, false);
             break;
 
+        case 943:
+            tr_variantDictAddStr(settings, TR_KEY_default_trackers, optarg);
+            break;
+
         case 'd':
             *dump_settings = true;
             break;
diff --git a/extras/rpc-spec.txt b/extras/rpc-spec.txt
index 09eac6b8e..377137f23 100644
--- a/extras/rpc-spec.txt
+++ b/extras/rpc-spec.txt
@@ -474,6 +474,7 @@
    "blocklist-size"                 | number     | number of rules in the blocklist
    "cache-size-mb"                  | number     | maximum size of the disk cache (MB)
    "config-dir"                     | string     | location of transmission's configuration directory
+   "default-trackers"               | string     | a list of default trackers to be added to new public torrents (and existing ones, after a reload)
    "download-dir"                   | string     | default path to download torrents
    "download-queue-size"            | number     | max number of torrents to download at once (see download-queue-enabled)
    "download-queue-enabled"         | boolean    | if true, limit how many torrents can be downloaded at once
diff --git a/gtk/main.c b/gtk/main.c
index a164ab439..f2c5becf3 100644
--- a/gtk/main.c
+++ b/gtk/main.c
@@ -1110,6 +1110,10 @@ static void on_prefs_changed(TrCore* core UNUSED, tr_quark const key, gpointer d
         tr_sessionSetEncryption(tr, gtr_pref_int_get(key));
         break;
 
+    case TR_KEY_default_trackers:
+        tr_sessionSetDefaultTrackers(tr, gtr_pref_string_get (key));
+        break;
+
     case TR_KEY_download_dir:
         tr_sessionSetDownloadDir(tr, gtr_pref_string_get(key));
         break;
diff --git a/gtk/tr-prefs.c b/gtk/tr-prefs.c
index 00e2dba11..b397a4195 100644
--- a/gtk/tr-prefs.c
+++ b/gtk/tr-prefs.c
@@ -197,6 +197,45 @@ static GtkWidget* new_entry(tr_quark const key, gpointer core)
     return w;
 }
 
+static void text_buffer_changed_cb(GtkTextBuffer* buffer, gpointer core)
+{
+    tr_quark const key = GPOINTER_TO_INT(g_object_get_data(G_OBJECT(buffer), PREF_KEY));
+    GtkTextIter start, end;
+    gtk_text_buffer_get_start_iter(buffer, &start);
+    gtk_text_buffer_get_end_iter(buffer, &end);
+    char const* value = gtk_text_buffer_get_text(buffer, &start, &end, FALSE);
+
+    gtr_core_set_pref(TR_CORE(core), key, value);
+}
+
+static GtkWidget* new_text_view(tr_quark const key, gpointer core)
+{
+    GtkWidget* scroll = gtk_scrolled_window_new(NULL, NULL);
+    GtkWidget* w = gtk_text_view_new();
+    GtkTextBuffer* buffer = gtk_text_view_get_buffer(GTK_TEXT_VIEW(w));
+    char const* value = gtr_pref_string_get(key);
+
+    if (value)
+    {
+        gtk_text_buffer_set_text(buffer, value, -1);
+    }
+
+    /* set up the scrolled window and put the text view in it */
+    gtk_scrolled_window_set_policy(GTK_SCROLLED_WINDOW(scroll),
+                                   GTK_POLICY_AUTOMATIC,
+                                   GTK_POLICY_AUTOMATIC);
+    gtk_scrolled_window_set_shadow_type(GTK_SCROLLED_WINDOW(scroll),
+                                        GTK_SHADOW_IN);
+    gtk_container_add(GTK_CONTAINER(scroll), w);
+    gtk_widget_set_size_request(scroll, -1, 200);
+
+    /* key and signal */
+    g_object_set_data(G_OBJECT(buffer), PREF_KEY, GINT_TO_POINTER(key));
+    g_signal_connect(buffer, "changed", G_CALLBACK(text_buffer_changed_cb), core);
+
+    return scroll;
+}
+
 static void chosen_cb(GtkFileChooser* w, gpointer core)
 {
     tr_quark const key = GPOINTER_TO_INT(g_object_get_data(G_OBJECT(w), PREF_KEY));
@@ -1191,6 +1230,12 @@ static GtkWidget* networkPage(GObject* core)
     gtk_widget_set_tooltip_text(w, s);
     hig_workarea_add_wide_control(t, &row, w);
 
+    hig_workarea_add_section_title(t, &row, _("Default Trackers"));
+    w = new_text_view(TR_KEY_default_trackers, core);
+    s = _("a list of default trackers to be added to new public torrents (and existing ones, after a reload)");
+    gtk_widget_set_tooltip_text(w, s);
+    hig_workarea_add_wide_control(t, &row, w);
+
     return t;
 }
 
diff --git a/libtransmission/quark.c b/libtransmission/quark.c
index e19ac9a2f..c2be470b4 100644
--- a/libtransmission/quark.c
+++ b/libtransmission/quark.c
@@ -77,6 +77,7 @@ static struct tr_key_struct const my_static[] =
     { "current-stats", 13 },
     { "date", 4 },
     { "dateCreated", 11 },
+    { "default-trackers", 16 },
     { "delete-local-data", 17 },
     { "desiredAvailable", 16 },
     { "destination", 11 },
diff --git a/libtransmission/quark.h b/libtransmission/quark.h
index 9dc534560..e8a7d66d0 100644
--- a/libtransmission/quark.h
+++ b/libtransmission/quark.h
@@ -79,6 +79,7 @@ enum
     TR_KEY_current_stats,
     TR_KEY_date,
     TR_KEY_dateCreated,
+    TR_KEY_default_trackers,
     TR_KEY_delete_local_data,
     TR_KEY_desiredAvailable,
     TR_KEY_destination,
diff --git a/libtransmission/rpcimpl.c b/libtransmission/rpcimpl.c
index e3896f197..e69e8e316 100644
--- a/libtransmission/rpcimpl.c
+++ b/libtransmission/rpcimpl.c
@@ -1929,6 +1929,11 @@ static char const* sessionSet(tr_session* session, tr_variant* args_in, tr_varia
         tr_sessionSetQueueStalledEnabled(session, boolVal);
     }
 
+    if (tr_variantDictFindStr(args_in, TR_KEY_default_trackers, &str, NULL))
+    {
+        tr_sessionSetDefaultTrackers(session, str);
+    }
+
     if (tr_variantDictFindInt(args_in, TR_KEY_download_queue_size, &i))
     {
         tr_sessionSetQueueSize(session, TR_DOWN, i);
@@ -2190,6 +2195,10 @@ static void addSessionField(tr_session* s, tr_variant* d, tr_quark key)
         tr_variantDictAddStr(d, key, tr_sessionGetConfigDir(s));
         break;
 
+    case TR_KEY_default_trackers:
+        tr_variantDictAddStr(d, key, tr_sessionGetDefaultTrackers(s));
+        break;
+
     case TR_KEY_download_dir:
         tr_variantDictAddStr(d, key, tr_sessionGetDownloadDir(s));
         break;
diff --git a/libtransmission/session.c b/libtransmission/session.c
index 9a0b7c104..d235ffe32 100644
--- a/libtransmission/session.c
+++ b/libtransmission/session.c
@@ -336,6 +336,7 @@ void tr_sessionGetDefaultSettings(tr_variant* d)
     tr_variantDictAddBool(d, TR_KEY_dht_enabled, true);
     tr_variantDictAddBool(d, TR_KEY_utp_enabled, true);
     tr_variantDictAddBool(d, TR_KEY_lpd_enabled, false);
+    tr_variantDictAddStr(d, TR_KEY_default_trackers, "");
     tr_variantDictAddStr(d, TR_KEY_download_dir, tr_getDefaultDownloadDir());
     tr_variantDictAddInt(d, TR_KEY_speed_limit_down, 100);
     tr_variantDictAddBool(d, TR_KEY_speed_limit_down_enabled, false);
@@ -405,6 +406,7 @@ void tr_sessionGetSettings(tr_session* s, tr_variant* d)
     tr_variantDictAddBool(d, TR_KEY_blocklist_enabled, tr_blocklistIsEnabled(s));
     tr_variantDictAddStr(d, TR_KEY_blocklist_url, tr_blocklistGetURL(s));
     tr_variantDictAddInt(d, TR_KEY_cache_size_mb, tr_sessionGetCacheLimit_MB(s));
+    tr_variantDictAddStr(d, TR_KEY_default_trackers, tr_sessionGetDefaultTrackers(s));
     tr_variantDictAddBool(d, TR_KEY_dht_enabled, s->isDHTEnabled);
     tr_variantDictAddBool(d, TR_KEY_utp_enabled, s->isUTPEnabled);
     tr_variantDictAddBool(d, TR_KEY_lpd_enabled, s->isLPDEnabled);
@@ -825,6 +827,11 @@ static void sessionSetImpl(void* vdata)
         tr_sessionSetCacheLimit_MB(session, i);
     }
 
+    if (tr_variantDictFindStr(settings, TR_KEY_default_trackers, &str, NULL))
+    {
+        tr_sessionSetDefaultTrackers(session, str);
+    }
+
     if (tr_variantDictFindInt(settings, TR_KEY_peer_limit_per_torrent, &i))
     {
         tr_sessionSetPeerLimitPerTorrent(session, i);
@@ -2359,6 +2366,55 @@ int tr_sessionGetCacheLimit_MB(tr_session const* session)
 ****
 ***/
 
+void tr_sessionSetDefaultTrackers(tr_session* session, char const* defaultTrackersStr)
+{
+    void* tmp;
+    char const* walk;
+
+    TR_ASSERT(tr_isSession(session));
+
+    /* keep the string */
+    tmp = session->defaultTrackersStr;
+    session->defaultTrackersStr = tr_strdup(defaultTrackersStr);
+    tr_free(tmp);
+
+    /* clear out the old list entries */
+    while ((tmp = tr_list_pop_front(&session->defaultTrackers)))
+    {
+        tr_free(tmp);
+    }
+
+    /* build the new list entries */
+    for (walk=defaultTrackersStr; walk && *walk;)
+    {
+        char const* delimiters = " ,;\r\n\t";
+        size_t const len = strcspn(walk, delimiters);
+        if (len)
+        {
+            char* token = tr_strndup(walk, len);
+            tr_list_append(&session->defaultTrackers, token);
+        }
+
+        if (walk[len]=='\0')
+        {
+            break;
+        }
+
+        walk += len + 1;
+    }
+}
+
+char const* tr_sessionGetDefaultTrackers(tr_session const* session)
+{
+    TR_ASSERT(tr_isSession(session));
+
+    return session->defaultTrackersStr ? session->defaultTrackersStr : "";
+}
+
+/***
+****
+***/
+
 struct port_forwarding_data
 {
     bool enabled;
diff --git a/libtransmission/session.h b/libtransmission/session.h
index 4ccf7fe46..63ee36fc2 100644
--- a/libtransmission/session.h
+++ b/libtransmission/session.h
@@ -222,6 +222,9 @@ struct tr_session
 
     struct tr_bindinfo* public_ipv4;
     struct tr_bindinfo* public_ipv6;
+
+    struct tr_list* defaultTrackers;
+    char* defaultTrackersStr;
 };
 
 static inline tr_port tr_sessionGetPublicPeerPort(tr_session const* session)
diff --git a/libtransmission/torrent.c b/libtransmission/torrent.c
index 23a0e9b22..a212c3d6b 100644
--- a/libtransmission/torrent.c
+++ b/libtransmission/torrent.c
@@ -34,6 +34,7 @@
 #include "fdlimit.h" /* tr_fdTorrentClose */
 #include "file.h"
 #include "inout.h" /* tr_ioTestPiece() */
+#include "list.h"
 #include "log.h"
 #include "magnet.h"
 #include "metainfo.h"
@@ -1131,6 +1132,72 @@ static tr_parse_result torrentParseImpl(tr_ctor const* ctor, tr_info* setmeInfo,
     return result;
 }
 
+static void tr_torrentAddDefaultTrackers(tr_torrent* tor)
+{
+    tr_list* l;
+    int tier = -1;
+    int i;
+    tr_tracker_info* trackers;
+    int numExistingTrackers = tor->info.trackerCount;
+    int numNewTrackers = tr_list_size(tor->session->defaultTrackers);
+    char* url;
+    bool duplicate;
+    bool changed = false;
+
+    if (!numNewTrackers || tor->info.isPrivate)
+    {
+        return;
+    }
+
+    // copy existing trackers
+    trackers = tr_new0(tr_tracker_info, numExistingTrackers + numNewTrackers);
+    for (i=0; i<numExistingTrackers; ++i)
+    {
+        trackers[i].tier = tor->info.trackers[i].tier;
+        trackers[i].announce = tr_strdup(tor->info.trackers[i].announce);
+        tier = MAX(tier, tor->info.trackers[i].tier);
+    }
+
+    // add the new ones
+    for (l=tor->session->defaultTrackers; l!=NULL; l=l->next)
+    {
+        url = (char*)l->data;
+        if (tr_urlIsValidTracker(url))
+        {
+            // check for duplicates
+            duplicate = false;
+            for (i=0; i<numExistingTrackers; ++i)
+            {
+                if (strcmp(trackers[i].announce, url) == 0)
+                {
+                    duplicate = true;
+                    break;
+                }
+            }
+            if (duplicate)
+            {
+                continue;
+            }
+            trackers[numExistingTrackers].tier = ++tier; /* add a new tier */
+            trackers[numExistingTrackers].announce = tr_strdup(url);
+            ++numExistingTrackers;
+            changed = true;
+        }
+    }
+
+    if (changed)
+    {
+        tr_torrentSetAnnounceList(tor, trackers, numExistingTrackers);
+    }
+
+    for (i=0; i<numExistingTrackers; ++i)
+    {
+        tr_free(trackers[i].announce);
+    }
+
+    tr_free(trackers);
+}
+
 tr_parse_result tr_torrentParse(tr_ctor const* ctor, tr_info* setmeInfo)
 {
     return torrentParseImpl(ctor, setmeInfo, NULL, NULL, NULL);
@@ -1160,6 +1227,7 @@ tr_torrent* tr_torrentNew(tr_ctor const* ctor, int* setme_error, int* setme_dupl
         }
 
         torrentInit(tor, ctor);
+        tr_torrentAddDefaultTrackers(tor);
     }
     else
     {
diff --git a/libtransmission/transmission.h b/libtransmission/transmission.h
index 08a24eca4..9306a9d5f 100644
--- a/libtransmission/transmission.h
+++ b/libtransmission/transmission.h
@@ -471,6 +471,8 @@ int tr_sessionGetCacheLimit_MB(tr_session const* session);
 
 tr_encryption_mode tr_sessionGetEncryption(tr_session* session);
 void tr_sessionSetEncryption(tr_session* session, tr_encryption_mode mode);
+void tr_sessionSetDefaultTrackers(tr_session* session, char const* defaultTrackersStr);
+char const* tr_sessionGetDefaultTrackers(tr_session const* session);
 
 /***********************************************************************
 ** Incoming Peer Connections Port
diff --git a/qt/Prefs.cc b/qt/Prefs.cc
index 273e42aca..5e63cd25e 100644
--- a/qt/Prefs.cc
+++ b/qt/Prefs.cc
@@ -77,6 +77,7 @@ Prefs::PrefItem Prefs::myItems[] =
     { ALT_SPEED_LIMIT_TIME_DAY, TR_KEY_alt_speed_time_day, QVariant::Int },
     { BLOCKLIST_ENABLED, TR_KEY_blocklist_enabled, QVariant::Bool },
     { BLOCKLIST_URL, TR_KEY_blocklist_url, QVariant::String },
+    { DEFAULT_TRACKERS, TR_KEY_default_trackers, QVariant::String },
     { DSPEED, TR_KEY_speed_limit_down, QVariant::Int },
     { DSPEED_ENABLED, TR_KEY_speed_limit_down_enabled, QVariant::Bool },
     { DOWNLOAD_DIR, TR_KEY_download_dir, QVariant::String },
diff --git a/qt/Prefs.h b/qt/Prefs.h
index 1b553c441..013e41fc4 100644
--- a/qt/Prefs.h
+++ b/qt/Prefs.h
@@ -81,6 +81,7 @@ public:
         ALT_SPEED_LIMIT_TIME_DAY,
         BLOCKLIST_ENABLED,
         BLOCKLIST_URL,
+        DEFAULT_TRACKERS,
         DSPEED,
         DSPEED_ENABLED,
         DOWNLOAD_DIR,
diff --git a/qt/PrefsDialog.cc b/qt/PrefsDialog.cc
index fe538d2a8..1ddb9b24e 100644
--- a/qt/PrefsDialog.cc
+++ b/qt/PrefsDialog.cc
@@ -193,6 +193,10 @@ bool PrefsDialog::updateWidgetValue(QWidget* widget, int prefKey)
     {
         prefWidget.as<FreeSpaceLabel>()->setPath(myPrefs.getString(prefKey));
     }
+    else if (prefWidget.is<QPlainTextEdit>())
+    {
+        prefWidget.as<QPlainTextEdit>()->setPlainText(myPrefs.getString(prefKey));
+    }
     else
     {
         return false;
@@ -229,6 +233,10 @@ void PrefsDialog::linkWidgetToPref(QWidget* widget, int prefKey)
     {
         connect(widget, SIGNAL(editingFinished()), SLOT(spinBoxEditingFinished()));
     }
+    else if (prefWidget.is<QPlainTextEdit>())
+    {
+        connect(widget, SIGNAL(textChanged()), SLOT(plainTextChanged()));
+    }
 }
 
 void PrefsDialog::checkBoxToggled(bool checked)
@@ -290,6 +298,22 @@ void PrefsDialog::pathChanged(QString const& path)
     }
 }
 
+void PrefsDialog::plainTextChanged()
+{
+    PreferenceWidget const prefWidget(sender());
+
+    if (prefWidget.is<QPlainTextEdit>())
+    {
+        QPlainTextEdit const* const plainTextEdit = prefWidget.as<QPlainTextEdit>();
+
+        if (plainTextEdit->document()->isModified())
+        {
+            myPrefs.set(prefWidget.getPrefKey(), plainTextEdit->toPlainText());
+            // we avoid using setPref() because the included refreshPref() call would reset the cursor while we're editing
+        }
+    }
+}
+
 /***
 ****
 ***/
@@ -417,6 +441,7 @@ void PrefsDialog::initNetworkTab()
     linkWidgetToPref(ui.enablePexCheck, Prefs::PEX_ENABLED);
     linkWidgetToPref(ui.enableDhtCheck, Prefs::DHT_ENABLED);
     linkWidgetToPref(ui.enableLpdCheck, Prefs::LPD_ENABLED);
+    linkWidgetToPref(ui.defaultTrackersPlainTextEdit, Prefs::DEFAULT_TRACKERS);
 
     ColumnResizer* cr(new ColumnResizer(this));
     cr->addLayout(ui.incomingPeersSectionLayout);
@@ -741,6 +766,7 @@ void PrefsDialog::refreshPref(int key)
     {
         QWidget* w(it.value());
 
+        w->blockSignals(true);
         if (!updateWidgetValue(w, key))
         {
             if (key == Prefs::ENCRYPTION)
@@ -750,5 +776,6 @@ void PrefsDialog::refreshPref(int key)
                 comboBox->setCurrentIndex(index);
             }
         }
+        w->blockSignals(false);
     }
 }
diff --git a/qt/PrefsDialog.h b/qt/PrefsDialog.h
index 30dde12bf..785f56064 100644
--- a/qt/PrefsDialog.h
+++ b/qt/PrefsDialog.h
@@ -56,6 +56,7 @@ private slots:
     void timeEditingFinished();
     void lineEditingFinished();
     void pathChanged(QString const& path);
+    void plainTextChanged();
     void refreshPref(int key);
     void encryptionEdited(int);
     void altSpeedDaysEdited(int);
diff --git a/qt/PrefsDialog.ui b/qt/PrefsDialog.ui
index 65f16a30c..4a0af8caa 100644
--- a/qt/PrefsDialog.ui
+++ b/qt/PrefsDialog.ui
@@ -951,6 +951,26 @@
            </property>
           </widget>
          </item>
+         <item>
+          <widget class="QLabel" name="defaultTrackersLabel">
+           <property name="toolTip">
+            <string>a list of default trackers to be added to new public torrents (and existing ones, after a reload)</string>
+           </property>
+           <property name="text">
+            <string>Default Trackers:</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QPlainTextEdit" name="defaultTrackersPlainTextEdit">
+           <property name="lineWrapMode">
+            <enum>QPlainTextEdit::NoWrap</enum>
+           </property>
+           <property name="plainText">
+            <string notr="true"/>
+           </property>
+          </widget>
+         </item>
         </layout>
        </item>
        <item>
diff --git a/qt/Session.cc b/qt/Session.cc
index cea7fbd53..cd0abde4f 100644
--- a/qt/Session.cc
+++ b/qt/Session.cc
@@ -176,6 +176,7 @@ void Session::updatePref(int key)
         case Prefs::BLOCKLIST_DATE:
         case Prefs::BLOCKLIST_ENABLED:
         case Prefs::BLOCKLIST_URL:
+        case Prefs::DEFAULT_TRACKERS:
         case Prefs::DHT_ENABLED:
         case Prefs::DOWNLOAD_QUEUE_ENABLED:
         case Prefs::DOWNLOAD_QUEUE_SIZE:
diff --git a/web/index.html b/web/index.html
index 6c9518a29..20323cf2a 100755
--- a/web/index.html
+++ b/web/index.html
@@ -182,6 +182,12 @@
 						<div class="title">Options</div>
 						<div class="checkbox-row"><input type="checkbox" id="utp-enabled" title="uTP is a tool for reducing network congestion."/>
 						                          <label for="utp-enabled" title="uTP is a tool for reducing network congestion.">Enable uTP for peer communication</label></div>
+						<div class="row">
+							<div class="key">
+								Default trackers (added to new public torrents and to existing ones on reload):
+							</div>
+							<textarea type="textarea" id="default-trackers"></textarea>
+						</div>
 					</div>
 				</div>
 			</div>
diff --git a/web/javascript/prefs-dialog.js b/web/javascript/prefs-dialog.js
index 1db6566b1..535a07450 100644
--- a/web/javascript/prefs-dialog.js
+++ b/web/javascript/prefs-dialog.js
@@ -23,6 +23,7 @@ function PrefsDialog(remote) {
             'blocklist-enabled',
             'blocklist-size',
             'blocklist-url',
+            'default-trackers',
             'dht-enabled',
             'download-dir',
             'encryption',
@@ -114,6 +115,7 @@ function PrefsDialog(remote) {
             return e.prop('checked');
 
         case 'text':
+        case 'textarea':
         case 'url':
         case 'email':
         case 'number':
@@ -197,6 +199,7 @@ function PrefsDialog(remote) {
             case 'checkbox':
             case 'radio':
             case 'select-one':
+            case 'textarea':
                 e.change(onControlChanged);
                 break;
 
@@ -261,6 +264,7 @@ function PrefsDialog(remote) {
                 setGroupEnabled(key, val);
                 break;
             case 'text':
+            case 'textarea':
             case 'url':
             case 'email':
             case 'number':
diff --git a/web/style/transmission/common.css b/web/style/transmission/common.css
index 10a3a5484..be98b5d73 100644
--- a/web/style/transmission/common.css
+++ b/web/style/transmission/common.css
@@ -362,6 +362,10 @@ ul.torrent_list {
   .prefs-section #blocklist-info {
     font-size: smaller;
     margin-top: 3px; }
+  .prefs-section #default-trackers {
+    width: 100%;
+    height: 100px;
+    margin-top: 10px; }
 
 /***
 ****
diff --git a/web/style/transmission/common.scss b/web/style/transmission/common.scss
index eed5b2d88..71653a605 100644
--- a/web/style/transmission/common.scss
+++ b/web/style/transmission/common.scss
@@ -494,6 +494,12 @@ ul.torrent_list
 		font-size: smaller;
 		margin-top: 3px;
 	}
+
+	#default-trackers {
+		width: 100%;
+		height: 100px;
+		margin-top: 10px;
+	}
 }
 
 /***
