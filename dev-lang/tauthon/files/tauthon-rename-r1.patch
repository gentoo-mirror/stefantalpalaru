diff --git a/.gitignore b/.gitignore
index 947acdd7ec..790d8904db 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,5 +1,5 @@
 # Two-trick pony for OSX and other case insensitive file systems:
-# Ignore ./python binary on Unix but still look into ./Python/ directory.
+# Ignore ./tauthon binary on Unix but still look into ./Python/ directory.
 /tauthon
 !/Python/
 *.cover
@@ -70,16 +70,16 @@ build/
 config.cache
 config.log
 config.status
-libpython*.a
-libpython*.so*
-libpython*.dylib
-libpython*.dll
+libtauthon*.a
+libtauthon*.so*
+libtauthon*.dylib
+libtauthon*.dll
 platform
 pybuilddir.txt
 pyconfig.h
-python$
-python.bat
-python.exe
+tauthon$
+tauthon.bat
+tauthon.exe
 tauthon*-gdb.py
 tags
 TAGS
diff --git a/.travis.yml b/.travis.yml
index b09ffdd34b..7603f602a2 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -5,7 +5,7 @@ os:
   - osx
 env:
   global:
-    - EXTRATESTOPTS=-W
+    - EXTRATESTOPTS="-w -j3"
   matrix:
     - CONFIGURE_ARGS=--with-pydebug
     - CONFIGURE_ARGS=""
diff --git a/Lib/distutils/command/build_ext.py b/Lib/distutils/command/build_ext.py
index 2c68be39cd..dc1e7b20d5 100644
--- a/Lib/distutils/command/build_ext.py
+++ b/Lib/distutils/command/build_ext.py
@@ -759,7 +759,7 @@ class build_ext (Command):
         else:
             from distutils import sysconfig
             if sysconfig.get_config_var('Py_ENABLE_SHARED'):
-                template = "python%d.%d"
+                template = "tauthon%d.%d"
                 pythonlib = (template %
                              (sys.hexversion >> 24, (sys.hexversion >> 16) & 0xff))
                 return ext.libraries + [pythonlib]
diff --git a/Lib/distutils/command/install.py b/Lib/distutils/command/install.py
index b9f1c6c566..ae9024a67a 100644
--- a/Lib/distutils/command/install.py
+++ b/Lib/distutils/command/install.py
@@ -41,23 +41,23 @@ else:
 
 INSTALL_SCHEMES = {
     'unix_prefix': {
-        'purelib': '$base/lib/python$py_version_short/site-packages',
-        'platlib': '$platbase/lib/python$py_version_short/site-packages',
-        'headers': '$base/include/python$py_version_short/$dist_name',
+        'purelib': '$base/lib/tauthon$py_version_short/site-packages',
+        'platlib': '$platbase/lib/tauthon$py_version_short/site-packages',
+        'headers': '$base/include/tauthon$py_version_short/$dist_name',
         'scripts': '$base/bin',
         'data'   : '$base',
         },
     'unix_home': {
-        'purelib': '$base/lib/python',
-        'platlib': '$base/lib/python',
-        'headers': '$base/include/python/$dist_name',
+        'purelib': '$base/lib/tauthon',
+        'platlib': '$base/lib/tauthon',
+        'headers': '$base/include/tauthon/$dist_name',
         'scripts': '$base/bin',
         'data'   : '$base',
         },
     'unix_user': {
         'purelib': '$usersite',
         'platlib': '$usersite',
-        'headers': '$userbase/include/python$py_version_short/$dist_name',
+        'headers': '$userbase/include/tauthon$py_version_short/$dist_name',
         'scripts': '$userbase/bin',
         'data'   : '$userbase',
         },
@@ -65,7 +65,7 @@ INSTALL_SCHEMES = {
     'nt_user': {
         'purelib': '$usersite',
         'platlib': '$usersite',
-        'headers': '$userbase/Python$py_version_nodot/Include/$dist_name',
+        'headers': '$userbase/Tauthon$py_version_nodot/Include/$dist_name',
         'scripts': '$userbase/Scripts',
         'data'   : '$userbase',
         },
@@ -79,7 +79,7 @@ INSTALL_SCHEMES = {
     'os2_home': {
         'purelib': '$usersite',
         'platlib': '$usersite',
-        'headers': '$userbase/include/python$py_version_short/$dist_name',
+        'headers': '$userbase/include/tauthon$py_version_short/$dist_name',
         'scripts': '$userbase/bin',
         'data'   : '$userbase',
         },
@@ -117,7 +117,7 @@ class install (Command):
 
         # Or, explicitly set the installation scheme
         ('install-purelib=', None,
-         "installation directory for pure Python module distributions"),
+         "installation directory for pure Tauthon module distributions"),
         ('install-platlib=', None,
          "installation directory for non-pure module distributions"),
         ('install-lib=', None,
@@ -127,7 +127,7 @@ class install (Command):
         ('install-headers=', None,
          "installation directory for C/C++ headers"),
         ('install-scripts=', None,
-         "installation directory for Python scripts"),
+         "installation directory for Tauthon scripts"),
         ('install-data=', None,
          "installation directory for data files"),
 
@@ -137,8 +137,8 @@ class install (Command):
         ('compile', 'c', "compile .py to .pyc [default]"),
         ('no-compile', None, "don't compile .py files"),
         ('optimize=', 'O',
-         "also compile with optimization: -O1 for \"python -O\", "
-         "-O2 for \"python -OO\", and -O0 to disable [default: -O0]"),
+         "also compile with optimization: -O1 for \"tauthon -O\", "
+         "-O2 for \"tauthon -OO\", and -O0 to disable [default: -O0]"),
 
         # Miscellaneous control options
         ('force', 'f',
@@ -234,7 +234,7 @@ class install (Command):
     # -- Option finalizing methods -------------------------------------
     # (This is rather more involved than for most commands,
     # because this is where the policy for installing third-
-    # party Python modules on various platforms given a wide
+    # party Tauthon modules on various platforms given a wide
     # array of user input is decided.  Yes, it's quite complex!)
 
     def finalize_options (self):
@@ -242,9 +242,9 @@ class install (Command):
         # This method (and its pliant slaves, like 'finalize_unix()',
         # 'finalize_other()', and 'select_scheme()') is where the default
         # installation directories for modules, extension modules, and
-        # anything else we care to install from a Python module
+        # anything else we care to install from a Tauthon module
         # distribution.  Thus, this code makes a pretty important policy
-        # statement about how third-party stuff is added to a Python
+        # statement about how third-party stuff is added to a Tauthon
         # installation!  Note that the actual work of installation is done
         # by the relatively simple 'install_*' commands; they just take
         # their orders from the installation directory options determined
@@ -596,7 +596,7 @@ class install (Command):
             not (self.path_file and self.install_path_file) and
             install_lib not in sys_path):
             log.debug(("modules installed to '%s', which is not in "
-                       "Python's module search path (sys.path) -- "
+                       "Tauthon's module search path (sys.path) -- "
                        "you'll have to change the search path yourself"),
                        self.install_lib)
 
@@ -645,7 +645,7 @@ class install (Command):
     # -- Predicates for sub-command list -------------------------------
 
     def has_lib (self):
-        """Return true if the current distribution has any Python
+        """Return true if the current distribution has any Tauthon
         modules to install."""
         return (self.distribution.has_pure_modules() or
                 self.distribution.has_ext_modules())
diff --git a/Lib/distutils/sysconfig.py b/Lib/distutils/sysconfig.py
index de7da1d413..65e1ccab62 100644
--- a/Lib/distutils/sysconfig.py
+++ b/Lib/distutils/sysconfig.py
@@ -90,7 +90,7 @@ def get_python_inc(plat_specific=0, prefix=None):
                 # Include is located in the srcdir
                 inc_dir = os.path.join(srcdir, "Include")
             return inc_dir
-        return os.path.join(prefix, "include", "python" + get_python_version())
+        return os.path.join(prefix, "include", "tauthon" + get_python_version())
     elif os.name == "nt":
         return os.path.join(prefix, "include")
     elif os.name == "os2":
@@ -120,7 +120,7 @@ def get_python_lib(plat_specific=0, standard_lib=0, prefix=None):
 
     if os.name == "posix":
         libpython = os.path.join(prefix,
-                                 "lib", "python" + get_python_version())
+                                 "lib", "tauthon" + get_python_version())
         if standard_lib:
             return libpython
         else:
diff --git a/Lib/platform.py b/Lib/platform.py
index 55f2fa8995..fefb9b49af 100755
--- a/Lib/platform.py
+++ b/Lib/platform.py
@@ -1414,15 +1414,15 @@ def _sys_version(sys_version=None):
         compiler = ""
 
     else:
-        # CPython
+        # Tauthon
         match = _sys_version_parser.match(sys_version)
         if match is None:
             raise ValueError(
-                'failed to parse CPython sys.version: %s' %
+                'failed to parse Tauthon sys.version: %s' %
                 repr(sys_version))
         version, buildno, builddate, buildtime, compiler = \
               match.groups()
-        name = 'CPython'
+        name = 'Tauthon'
         if builddate is None:
             builddate = ''
         elif buildtime:
@@ -1451,7 +1451,7 @@ def python_implementation():
     """ Returns a string identifying the Python implementation.
 
         Currently, the following implementations are identified:
-          'CPython' (C implementation of Python),
+          'Tauthon' (CPython fork),
           'IronPython' (.NET implementation of Python),
           'Jython' (Java implementation of Python),
           'PyPy' (Python implementation of Python).
diff --git a/Lib/site.py b/Lib/site.py
index 3b51e81d4a..549238a183 100644
--- a/Lib/site.py
+++ b/Lib/site.py
@@ -289,7 +289,7 @@ def getsitepackages():
             sitepackages.append(os.path.join(prefix, "Lib", "site-packages"))
         elif os.sep == '/':
             sitepackages.append(os.path.join(prefix, "lib",
-                                        "python" + sys.version[:3],
+                                        "tauthon" + sys.version[:3],
                                         "site-packages"))
             sitepackages.append(os.path.join(prefix, "lib", "site-python"))
         else:
diff --git a/Lib/sysconfig.py b/Lib/sysconfig.py
index 9c8350d953..f4f48c8c05 100644
--- a/Lib/sysconfig.py
+++ b/Lib/sysconfig.py
@@ -7,22 +7,22 @@ from os.path import pardir, realpath
 
 _INSTALL_SCHEMES = {
     'posix_prefix': {
-        'stdlib': '{base}/lib/python{py_version_short}',
-        'platstdlib': '{platbase}/lib/python{py_version_short}',
-        'purelib': '{base}/lib/python{py_version_short}/site-packages',
-        'platlib': '{platbase}/lib/python{py_version_short}/site-packages',
-        'include': '{base}/include/python{py_version_short}',
-        'platinclude': '{platbase}/include/python{py_version_short}',
+        'stdlib': '{base}/lib/tauthon{py_version_short}',
+        'platstdlib': '{platbase}/lib/tauthon{py_version_short}',
+        'purelib': '{base}/lib/tauthon{py_version_short}/site-packages',
+        'platlib': '{platbase}/lib/tauthon{py_version_short}/site-packages',
+        'include': '{base}/include/tauthon{py_version_short}',
+        'platinclude': '{platbase}/include/tauthon{py_version_short}',
         'scripts': '{base}/bin',
         'data': '{base}',
         },
     'posix_home': {
-        'stdlib': '{base}/lib/python',
-        'platstdlib': '{base}/lib/python',
-        'purelib': '{base}/lib/python',
-        'platlib': '{base}/lib/python',
-        'include': '{base}/include/python',
-        'platinclude': '{base}/include/python',
+        'stdlib': '{base}/lib/tauthon',
+        'platstdlib': '{base}/lib/tauthon',
+        'purelib': '{base}/lib/tauthon',
+        'platlib': '{base}/lib/tauthon',
+        'include': '{base}/include/tauthon',
+        'platinclude': '{base}/include/tauthon',
         'scripts': '{base}/bin',
         'data'   : '{base}',
         },
@@ -47,37 +47,37 @@ _INSTALL_SCHEMES = {
         'data'   : '{base}',
         },
     'os2_home': {
-        'stdlib': '{userbase}/lib/python{py_version_short}',
-        'platstdlib': '{userbase}/lib/python{py_version_short}',
-        'purelib': '{userbase}/lib/python{py_version_short}/site-packages',
-        'platlib': '{userbase}/lib/python{py_version_short}/site-packages',
-        'include': '{userbase}/include/python{py_version_short}',
+        'stdlib': '{userbase}/lib/tauthon{py_version_short}',
+        'platstdlib': '{userbase}/lib/tauthon{py_version_short}',
+        'purelib': '{userbase}/lib/tauthon{py_version_short}/site-packages',
+        'platlib': '{userbase}/lib/tauthon{py_version_short}/site-packages',
+        'include': '{userbase}/include/tauthon{py_version_short}',
         'scripts': '{userbase}/bin',
         'data'   : '{userbase}',
         },
     'nt_user': {
-        'stdlib': '{userbase}/Python{py_version_nodot}',
-        'platstdlib': '{userbase}/Python{py_version_nodot}',
-        'purelib': '{userbase}/Python{py_version_nodot}/site-packages',
-        'platlib': '{userbase}/Python{py_version_nodot}/site-packages',
-        'include': '{userbase}/Python{py_version_nodot}/Include',
+        'stdlib': '{userbase}/tauthon{py_version_nodot}',
+        'platstdlib': '{userbase}/tauthon{py_version_nodot}',
+        'purelib': '{userbase}/tauthon{py_version_nodot}/site-packages',
+        'platlib': '{userbase}/tauthon{py_version_nodot}/site-packages',
+        'include': '{userbase}/tauthon{py_version_nodot}/Include',
         'scripts': '{userbase}/Scripts',
         'data'   : '{userbase}',
         },
     'posix_user': {
-        'stdlib': '{userbase}/lib/python{py_version_short}',
-        'platstdlib': '{userbase}/lib/python{py_version_short}',
-        'purelib': '{userbase}/lib/python{py_version_short}/site-packages',
-        'platlib': '{userbase}/lib/python{py_version_short}/site-packages',
-        'include': '{userbase}/include/python{py_version_short}',
+        'stdlib': '{userbase}/lib/tauthon{py_version_short}',
+        'platstdlib': '{userbase}/lib/tauthon{py_version_short}',
+        'purelib': '{userbase}/lib/tauthon{py_version_short}/site-packages',
+        'platlib': '{userbase}/lib/tauthon{py_version_short}/site-packages',
+        'include': '{userbase}/include/tauthon{py_version_short}',
         'scripts': '{userbase}/bin',
         'data'   : '{userbase}',
         },
     'osx_framework_user': {
-        'stdlib': '{userbase}/lib/python',
-        'platstdlib': '{userbase}/lib/python',
-        'purelib': '{userbase}/lib/python/site-packages',
-        'platlib': '{userbase}/lib/python/site-packages',
+        'stdlib': '{userbase}/lib/tauthon',
+        'platstdlib': '{userbase}/lib/tauthon',
+        'purelib': '{userbase}/lib/tauthon/site-packages',
+        'platlib': '{userbase}/lib/tauthon/site-packages',
         'include': '{userbase}/include',
         'scripts': '{userbase}/bin',
         'data'   : '{userbase}',
diff --git a/Lib/test/test_platform.py b/Lib/test/test_platform.py
index f754550f95..ec82fa7662 100644
--- a/Lib/test/test_platform.py
+++ b/Lib/test/test_platform.py
@@ -62,27 +62,27 @@ class PlatformTest(unittest.TestCase):
         # Old test.
         for input, output in (
             ('2.4.3 (#1, Jun 21 2006, 13:54:21) \n[GCC 3.3.4 (pre 3.3.5 20040809)]',
-             ('CPython', '2.4.3', '', '', '1', 'Jun 21 2006 13:54:21', 'GCC 3.3.4 (pre 3.3.5 20040809)')),
+             ('Tauthon', '2.4.3', '', '', '1', 'Jun 21 2006 13:54:21', 'GCC 3.3.4 (pre 3.3.5 20040809)')),
             ('IronPython 1.0.60816 on .NET 2.0.50727.42',
              ('IronPython', '1.0.60816', '', '', '', '', '.NET 2.0.50727.42')),
             ('IronPython 1.0 (1.0.61005.1977) on .NET 2.0.50727.42',
              ('IronPython', '1.0.0', '', '', '', '', '.NET 2.0.50727.42')),
             ('2.4.3 (truncation, date, t) \n[GCC]',
-             ('CPython', '2.4.3', '', '', 'truncation', 'date t', 'GCC')),
+             ('Tauthon', '2.4.3', '', '', 'truncation', 'date t', 'GCC')),
             ('2.4.3 (truncation, date, ) \n[GCC]',
-             ('CPython', '2.4.3', '', '', 'truncation', 'date', 'GCC')),
+             ('Tauthon', '2.4.3', '', '', 'truncation', 'date', 'GCC')),
             ('2.4.3 (truncation, date,) \n[GCC]',
-             ('CPython', '2.4.3', '', '', 'truncation', 'date', 'GCC')),
+             ('Tauthon', '2.4.3', '', '', 'truncation', 'date', 'GCC')),
             ('2.4.3 (truncation, date) \n[GCC]',
-             ('CPython', '2.4.3', '', '', 'truncation', 'date', 'GCC')),
+             ('Tauthon', '2.4.3', '', '', 'truncation', 'date', 'GCC')),
             ('2.4.3 (truncation, d) \n[GCC]',
-             ('CPython', '2.4.3', '', '', 'truncation', 'd', 'GCC')),
+             ('Tauthon', '2.4.3', '', '', 'truncation', 'd', 'GCC')),
             ('2.4.3 (truncation, ) \n[GCC]',
-             ('CPython', '2.4.3', '', '', 'truncation', '', 'GCC')),
+             ('Tauthon', '2.4.3', '', '', 'truncation', '', 'GCC')),
             ('2.4.3 (truncation,) \n[GCC]',
-             ('CPython', '2.4.3', '', '', 'truncation', '', 'GCC')),
+             ('Tauthon', '2.4.3', '', '', 'truncation', '', 'GCC')),
             ('2.4.3 (truncation) \n[GCC]',
-             ('CPython', '2.4.3', '', '', 'truncation', '', 'GCC')),
+             ('Tauthon', '2.4.3', '', '', 'truncation', '', 'GCC')),
             ):
             # branch and revision are not "parsed", but fetched
             # from sys.subversion.  Ignore them
@@ -95,9 +95,9 @@ class PlatformTest(unittest.TestCase):
         # python_revision(), python_build(), and python_compiler().
         sys_versions = {
             ("2.6.1 (r261:67515, Dec  6 2008, 15:26:00) \n[GCC 4.0.1 (Apple Computer, Inc. build 5370)]",
-             ('CPython', 'tags/r261', '67515'), self.save_platform)
+             ('Tauthon', 'tags/r261', '67515'), self.save_platform)
             :
-                ("CPython", "2.6.1", "tags/r261", "67515",
+                ("Tauthon", "2.6.1", "tags/r261", "67515",
                  ('r261:67515', 'Dec  6 2008 15:26:00'),
                  'GCC 4.0.1 (Apple Computer, Inc. build 5370)'),
 
diff --git a/Lib/test/test_site.py b/Lib/test/test_site.py
index 9569135c2c..e7804006ef 100644
--- a/Lib/test/test_site.py
+++ b/Lib/test/test_site.py
@@ -253,7 +253,7 @@ class HelperFunctionsTests(unittest.TestCase):
         elif os.sep == '/':
             # OS X, Linux, FreeBSD, etc
             self.assertEqual(len(dirs), 2)
-            wanted = os.path.join('xoxo', 'lib', 'python' + sys.version[:3],
+            wanted = os.path.join('xoxo', 'lib', 'tauthon' + sys.version[:3],
                                   'site-packages')
             self.assertEqual(dirs[0], wanted)
             wanted = os.path.join('xoxo', 'lib', 'site-python')
diff --git a/Makefile.pre.in b/Makefile.pre.in
index 3bdd143838..399b6a50c8 100644
--- a/Makefile.pre.in
+++ b/Makefile.pre.in
@@ -1,4 +1,4 @@
-# Top-level Makefile for Python
+# Top-level Makefile for Tauthon
 #
 # As distributed, this file is called Makefile.pre.in; it is processed
 # into the real Makefile by running the script ./configure, which
@@ -11,7 +11,7 @@
 #	make test
 #	make install
 #
-# If you have a previous version of Python installed that you don't
+# If you have a previous version of Tauthon installed that you don't
 # want to overwrite, you can use "make altinstall" instead of "make
 # install".  Refer to the "Installing" section in the README file for
 # additional details.
@@ -52,7 +52,7 @@ GNULD=          @GNULD@
 # Shell used by make (some versions default to the login shell, which is bad)
 SHELL=		/bin/sh
 
-# Use this to make a link between python$(VERSION) and python in $(BINDIR)
+# Use this to make a link between tauthon$(VERSION) and tauthon in $(BINDIR)
 LN=		@LN@
 
 # Portable install script (configure doesn't always guess right)
@@ -113,11 +113,11 @@ CONFINCLUDEDIR=	$(exec_prefix)/include
 SCRIPTDIR=	$(prefix)/lib
 
 # Detailed destination directories
-BINLIBDEST=	$(LIBDIR)/python$(VERSION)
-LIBDEST=	$(SCRIPTDIR)/python$(VERSION)
-INCLUDEPY=	$(INCLUDEDIR)/python$(VERSION)
-CONFINCLUDEPY=	$(CONFINCLUDEDIR)/python$(VERSION)
-LIBP=		$(LIBDIR)/python$(VERSION)
+BINLIBDEST=	$(LIBDIR)/tauthon$(VERSION)
+LIBDEST=	$(SCRIPTDIR)/tauthon$(VERSION)
+INCLUDEPY=	$(INCLUDEDIR)/tauthon$(VERSION)
+CONFINCLUDEPY=	$(CONFINCLUDEDIR)/tauthon$(VERSION)
+LIBP=		$(LIBDIR)/tauthon$(VERSION)
 
 # Symbols used for using shared libraries
 SO=		@SO@
@@ -130,7 +130,7 @@ DESTSHARED=	$(BINLIBDEST)/lib-dynload
 EXE=		@EXEEXT@
 BUILDEXE=	@BUILDEXEEXT@
 
-# Short name and location for Mac OS X Python framework
+# Short name and location for Mac OS X Tauthon framework
 UNIVERSALSDK=@UNIVERSALSDK@
 PYTHONFRAMEWORK=	@PYTHONFRAMEWORK@
 PYTHONFRAMEWORKDIR=	@PYTHONFRAMEWORKDIR@
@@ -145,7 +145,7 @@ MACOSX_DEPLOYMENT_TARGET=@CONFIGURE_MACOSX_DEPLOYMENT_TARGET@
 # Options to enable prebinding (for fast startup prior to Mac OS X 10.3)
 OTHER_LIBTOOL_OPT=@OTHER_LIBTOOL_OPT@
 
-# Environment to run shared python without installed libraries
+# Environment to run shared tauthon without installed libraries
 RUNSHARED=       @RUNSHARED@
 
 # ensurepip options
@@ -196,8 +196,8 @@ LIBOBJDIR=	Python/
 LIBOBJS=	@LIBOBJS@
 UNICODE_OBJS=   @UNICODE_OBJS@
 
-PYTHON=		tauthon$(EXE)
-BUILDPYTHON=	tauthon$(BUILDEXE)
+TAUTHON=		tauthon$(EXE)
+BUILDTAUTHON=	tauthon$(BUILDEXE)
 
 PYTHON_FOR_REGEN=@PYTHON_FOR_REGEN@
 PYTHON_FOR_BUILD=@PYTHON_FOR_BUILD@
@@ -216,7 +216,7 @@ PROFILE_TASK=-m test.regrtest --pgo -x test_asyncore test_gdb test_multiprocessi
 # report files for gcov / lcov coverage report
 COVERAGE_INFO=	$(abs_builddir)/coverage.info
 COVERAGE_REPORT=$(abs_builddir)/lcov-report
-COVERAGE_REPORT_OPTIONS=--no-branch-coverage --title "CPython lcov report"
+COVERAGE_REPORT_OPTIONS=--no-branch-coverage --title "Tauthon lcov report"
 
 # === Definitions added by makesetup ===
 
@@ -386,7 +386,7 @@ OBJECT_OBJS=	\
 
 
 ##########################################################################
-# objects that get linked into the Python library
+# objects that get linked into the Tauthon library
 LIBRARY_OBJS=	\
 		Modules/getbuildinfo.o \
 		$(PARSER_OBJS) \
@@ -401,13 +401,13 @@ LIBRARY_OBJS=	\
 
 # Default target
 all:		@DEF_MAKE_ALL_RULE@
-build_all:	check-clean-src $(BUILDPYTHON) oldsharedmods sharedmods gdbhooks
+build_all:	check-clean-src $(BUILDTAUTHON) oldsharedmods sharedmods gdbhooks
 
 # Check that the source is clean when building out of source.
 check-clean-src:
 	@if test -n "$(VPATH)" -a -f "$(srcdir)/Modules/python.o"; then \
 		echo "Error: The source directory ($(srcdir)) is not clean" ; \
-		echo "Building Python out of the source tree (in $(abs_builddir)) requires a clean source tree ($(abs_srcdir))" ; \
+		echo "Building Tauthon out of the source tree (in $(abs_builddir)) requires a clean source tree ($(abs_srcdir))" ; \
 		echo "Try to run: make -C \"$(srcdir)\" clean" ; \
 		exit 1; \
 	fi
@@ -437,7 +437,7 @@ build_all_generate_profile:
 
 run_profile_task:
 	: # FIXME: can't run for a cross build
-	$(LLVM_PROF_FILE) $(RUNSHARED) ./$(BUILDPYTHON) $(PROFILE_TASK) || true
+	$(LLVM_PROF_FILE) $(RUNSHARED) ./$(BUILDTAUTHON) $(PROFILE_TASK) || true
 
 build_all_merge_profile:
 	$(LLVM_PROF_MERGER)
@@ -486,12 +486,12 @@ coverage-report: regen-grammar
 
 
 # Build the interpreter
-$(BUILDPYTHON):	Modules/python.o $(LIBRARY) $(LDLIBRARY)
+$(BUILDTAUTHON):	Modules/python.o $(LIBRARY) $(LDLIBRARY)
 		$(LINKCC) $(LDFLAGS) $(LINKFORSHARED) -o $@ \
 			Modules/python.o \
 			$(BLDLIBRARY) $(LIBS) $(MODLIBS) $(SYSLIBS) $(LDLAST)
 
-platform: $(BUILDPYTHON) pybuilddir.txt
+platform: $(BUILDTAUTHON) pybuilddir.txt
 	$(RUNSHARED) $(PYTHON_FOR_BUILD) -c 'import sys ; from sysconfig import get_platform ; print get_platform()+"-"+sys.version[0:3]' >platform
 
 # Create build directory and generate the sysconfig build-time data there.
@@ -501,7 +501,7 @@ platform: $(BUILDPYTHON) pybuilddir.txt
 # problems by creating a dummy pybuilddir.txt just to allow interpreter
 # initialization to succeed.  It will be overwritten by generate-posix-vars
 # or removed in case of failure.
-pybuilddir.txt: $(BUILDPYTHON)
+pybuilddir.txt: $(BUILDTAUTHON)
 	@echo "none" > ./pybuilddir.txt
 	$(RUNSHARED) $(PYTHON_FOR_BUILD) -S -m sysconfig --generate-posix-vars ;\
 	if test $$? -ne 0 ; then \
@@ -518,7 +518,7 @@ Modules/_math.o: Modules/_math.c Modules/_math.h
 # Under GNU make, MAKEFLAGS are sorted and normalized; the 's' for
 # -s, --silent or --quiet is always the first char.
 # Under BSD make, MAKEFLAGS might be " -s -v x=y".
-sharedmods: $(BUILDPYTHON) pybuilddir.txt Modules/_math.o
+sharedmods: $(BUILDTAUTHON) pybuilddir.txt Modules/_math.o
 	@case "$$MAKEFLAGS" in \
 	    *\ -s*|s*) quiet="-q";; \
 	    *) quiet="";; \
@@ -539,7 +539,7 @@ $(LIBRARY): $(LIBRARY_OBJS)
 	$(AR) $(ARFLAGS) $@ $(MODOBJS)
 	$(RANLIB) $@
 
-libpython$(VERSION).so: $(LIBRARY_OBJS)
+libtauthon$(VERSION).so: $(LIBRARY_OBJS)
 	if test $(INSTSONAME) != $(LDLIBRARY); then \
 		$(BLDSHARED) -Wl,-h$(INSTSONAME) -o $(INSTSONAME) $(LIBRARY_OBJS) $(MODLIBS) $(SHLIBS) $(LIBC) $(LIBM) $(LDLAST); \
 		$(LN) -f $(INSTSONAME) $@; \
@@ -547,23 +547,23 @@ libpython$(VERSION).so: $(LIBRARY_OBJS)
 		$(BLDSHARED) -o $@ $(LIBRARY_OBJS) $(MODLIBS) $(SHLIBS) $(LIBC) $(LIBM) $(LDLAST); \
 	fi
 
-libpython$(VERSION).dylib: $(LIBRARY_OBJS)
-	 $(CC) -dynamiclib -Wl,-single_module $(LDFLAGS) -undefined dynamic_lookup -Wl,-install_name,$(prefix)/lib/libpython$(VERSION).dylib -Wl,-compatibility_version,$(VERSION) -Wl,-current_version,$(VERSION) -o $@ $(LIBRARY_OBJS) $(SHLIBS) $(LIBC) $(LIBM) $(LDLAST); \
+libtauthon$(VERSION).dylib: $(LIBRARY_OBJS)
+	 $(CC) -dynamiclib -Wl,-single_module $(LDFLAGS) -undefined dynamic_lookup -Wl,-install_name,$(prefix)/lib/libtauthon$(VERSION).dylib -Wl,-compatibility_version,$(VERSION) -Wl,-current_version,$(VERSION) -o $@ $(LIBRARY_OBJS) $(SHLIBS) $(LIBC) $(LIBM) $(LDLAST); \
 
 
-libpython$(VERSION).sl: $(LIBRARY_OBJS)
+libtauthon$(VERSION).sl: $(LIBRARY_OBJS)
 	$(LDSHARED) -o $@ $(LIBRARY_OBJS) $(MODLIBS) $(SHLIBS) $(LIBC) $(LIBM) $(LDLAST)
 
-# Copy up the gdb python hooks into a position where they can be automatically
+# Copy up the gdb tauthon hooks into a position where they can be automatically
 # loaded by gdb during Lib/test/test_gdb.py
 #
 # Distributors are likely to want to install this somewhere else e.g. relative
 # to the stripped DWARF data for the shared library.
-gdbhooks: $(BUILDPYTHON)-gdb.py
+gdbhooks: $(BUILDTAUTHON)-gdb.py
 
 SRC_GDB_HOOKS=$(srcdir)/Tools/gdb/libpython.py
-$(BUILDPYTHON)-gdb.py: $(SRC_GDB_HOOKS)
-	$(INSTALL_DATA) $(SRC_GDB_HOOKS) $(BUILDPYTHON)-gdb.py
+$(BUILDTAUTHON)-gdb.py: $(SRC_GDB_HOOKS)
+	$(INSTALL_DATA) $(SRC_GDB_HOOKS) $(BUILDTAUTHON)-gdb.py
 
 # This rule is here for OPENSTEP/Rhapsody/MacOSX. It builds a temporary
 # minimal framework (not including the Lib directory and such) in the current
@@ -587,9 +587,9 @@ $(PYTHONFRAMEWORKDIR)/Versions/$(VERSION)/$(PYTHONFRAMEWORK): \
 	$(LN) -fsn Versions/Current/Headers $(PYTHONFRAMEWORKDIR)/Headers
 	$(LN) -fsn Versions/Current/Resources $(PYTHONFRAMEWORKDIR)/Resources
 
-# This rule builds the Cygwin Python DLL and import library if configured
+# This rule builds the Cygwin Tauthon DLL and import library if configured
 # for a shared core library; otherwise, this rule is a noop.
-$(DLLLIBRARY) libpython$(VERSION).dll.a: $(LIBRARY_OBJS)
+$(DLLLIBRARY) libtauthon$(VERSION).dll.a: $(LIBRARY_OBJS)
 	if test -n "$(DLLLIBRARY)"; then \
 		$(LDSHARED) -Wl,--out-implib=$@ -o $(DLLLIBRARY) $^ \
 			$(LIBS) $(MODLIBS) $(SYSLIBS) $(LDLAST); \
@@ -854,7 +854,7 @@ $(LIBRARY_OBJS) $(MODOBJS) Modules/python.o: $(PYTHON_HEADERS)
 
 TESTOPTS=	-l $(EXTRATESTOPTS)
 TESTPROG=	$(srcdir)/Lib/test/regrtest.py
-TESTPYTHON=	$(RUNSHARED) ./$(BUILDPYTHON) -Wd -3 -E -tt $(TESTPYTHONOPTS)
+TESTPYTHON=	$(RUNSHARED) ./$(BUILDTAUTHON) -Wd -3 -E -tt $(TESTPYTHONOPTS)
 test:		@DEF_MAKE_RULE@ platform
 		-find $(srcdir)/Lib -name '*.py[co]' -print | xargs rm -f
 		-$(TESTPYTHON) $(TESTPROG) $(TESTOPTS)
@@ -877,7 +877,7 @@ testuniversal:	@DEF_MAKE_RULE@ platform
 		-find $(srcdir)/Lib -name '*.py[co]' -print | xargs rm -f
 		-$(TESTPYTHON) $(TESTPROG) -uall $(TESTOPTS)
 		$(TESTPYTHON) $(TESTPROG) -uall $(TESTOPTS)
-		$(RUNSHARED) /usr/libexec/oah/translate ./$(BUILDPYTHON) -E -tt $(TESTPROG) -uall $(TESTOPTS)
+		$(RUNSHARED) /usr/libexec/oah/translate ./$(BUILDTAUTHON) -E -tt $(TESTPROG) -uall $(TESTOPTS)
 
 
 # Like testall, but with a single pass only
@@ -889,7 +889,7 @@ buildbottest:	build_all platform
 		$(TESTPYTHON) -R $(TESTPROG) -uall --slowest -rwW $(TESTOPTS)
 
 pythoninfo: build_all
-		$(RUNSHARED) ./$(BUILDPYTHON) -m test.pythoninfo
+		$(RUNSHARED) ./$(BUILDTAUTHON) -m test.pythoninfo
 
 QUICKTESTOPTS=	$(TESTOPTS) -x test_subprocess test_io test_lib2to3 \
 		test_multibytecodec test_urllib2_localnet test_itertools \
@@ -910,10 +910,10 @@ memtest:	@DEF_MAKE_RULE@ platform
 # SSL tests
 .PHONY: multisslcompile multissltest
 multisslcompile: build_all
-	$(RUNSHARED) ./$(BUILDPYTHON) Tools/ssl/multissltests.py --compile-only
+	$(RUNSHARED) ./$(BUILDTAUTHON) Tools/ssl/multissltests.py --compile-only
 
 multissltest: build_all
-	$(RUNSHARED) ./$(BUILDPYTHON) Tools/ssl/multissltests.py
+	$(RUNSHARED) ./$(BUILDTAUTHON) Tools/ssl/multissltests.py
 
 # Install everything
 install:	@FRAMEWORKINSTALLFIRST@ commoninstall bininstall maninstall @FRAMEWORKINSTALLLAST@
@@ -965,33 +965,33 @@ $(DESTSHARED):
 
 
 # Install the interpreter by creating a symlink chain:
-#  $(PYTHON) -> python2 -> python$(VERSION))
+#  $(TAUTHON) -> tauthon2 -> tauthon$(VERSION))
 # Also create equivalent chains for other installed files
 bininstall:	altbininstall
 	if test ! -d $(DESTDIR)$(LIBPC); then \
 		echo "Creating directory $(LIBPC)"; \
 		$(INSTALL) -d -m $(DIRMODE) $(DESTDIR)$(LIBPC); \
 	fi
-	-if test -f $(DESTDIR)$(BINDIR)/$(PYTHON) -o -h $(DESTDIR)$(BINDIR)/$(PYTHON); \
-	then rm -f $(DESTDIR)$(BINDIR)/$(PYTHON); \
+	-if test -f $(DESTDIR)$(BINDIR)/$(TAUTHON) -o -h $(DESTDIR)$(BINDIR)/$(TAUTHON); \
+	then rm -f $(DESTDIR)$(BINDIR)/$(TAUTHON); \
 	else true; \
 	fi
-	(cd $(DESTDIR)$(BINDIR); $(LN) -s python2$(EXE) $(PYTHON))
-	-rm -f $(DESTDIR)$(BINDIR)/python2$(EXE)
-	(cd $(DESTDIR)$(BINDIR); $(LN) -s python$(VERSION)$(EXE) python2$(EXE))
+	(cd $(DESTDIR)$(BINDIR); $(LN) -s tauthon2$(EXE) $(TAUTHON))
+	-rm -f $(DESTDIR)$(BINDIR)/tauthon2$(EXE)
+	(cd $(DESTDIR)$(BINDIR); $(LN) -s tauthon$(VERSION)$(EXE) tauthon2$(EXE))
 	-rm -f $(DESTDIR)$(BINDIR)/python2-config
 	(cd $(DESTDIR)$(BINDIR); $(LN) -s python$(VERSION)-config python2-config)
 	-rm -f $(DESTDIR)$(BINDIR)/python-config
 	(cd $(DESTDIR)$(BINDIR); $(LN) -s python2-config python-config)
 	-test -d $(DESTDIR)$(LIBPC) || $(INSTALL) -d -m $(DIRMODE) $(DESTDIR)$(LIBPC)
-	-rm -f $(DESTDIR)$(LIBPC)/python2.pc
-	(cd $(DESTDIR)$(LIBPC); $(LN) -s python-$(VERSION).pc python2.pc)
-	-rm -f $(DESTDIR)$(LIBPC)/python.pc
-	(cd $(DESTDIR)$(LIBPC); $(LN) -s python2.pc python.pc)
+	-rm -f $(DESTDIR)$(LIBPC)/tauthon2.pc
+	(cd $(DESTDIR)$(LIBPC); $(LN) -s tauthon-$(VERSION).pc tauthon2.pc)
+	-rm -f $(DESTDIR)$(LIBPC)/tauthon.pc
+	(cd $(DESTDIR)$(LIBPC); $(LN) -s tauthon2.pc tauthon.pc)
 
 # Install the interpreter with $(VERSION) affixed
 # This goes into $(exec_prefix)
-altbininstall:	$(BUILDPYTHON)
+altbininstall:	$(BUILDTAUTHON)
 	@for i in $(BINDIR) $(LIBDIR); \
 	do \
 		if test ! -d $(DESTDIR)$$i; then \
@@ -1000,7 +1000,7 @@ altbininstall:	$(BUILDPYTHON)
 		else	true; \
 		fi; \
 	done
-	$(INSTALL_PROGRAM) $(BUILDPYTHON) $(DESTDIR)$(BINDIR)/python$(VERSION)$(EXE)
+	$(INSTALL_PROGRAM) $(BUILDTAUTHON) $(DESTDIR)$(BINDIR)/tauthon$(VERSION)$(EXE)
 	if test -f $(LDLIBRARY); then \
 		if test -n "$(DLLLIBRARY)" ; then \
 			$(INSTALL_SHARED) $(DLLLIBRARY) $(DESTDIR)$(BINDIR); \
@@ -1024,14 +1024,14 @@ altmaninstall:
 		fi; \
 	done
 	$(INSTALL_DATA) $(srcdir)/Misc/python.man \
-		$(DESTDIR)$(MANDIR)/man1/python$(VERSION).1
+		$(DESTDIR)$(MANDIR)/man1/tauthon$(VERSION).1
 
 # Install the unversioned manual pages
 maninstall:	altmaninstall
-	-rm -f $(DESTDIR)$(MANDIR)/man1/python2.1
-	(cd $(DESTDIR)$(MANDIR)/man1; $(LN) -s python$(VERSION).1 python2.1)
-	-rm -f $(DESTDIR)$(MANDIR)/man1/python.1
-	(cd $(DESTDIR)$(MANDIR)/man1; $(LN) -s python2.1 python.1)
+	-rm -f $(DESTDIR)$(MANDIR)/man1/tauthon2.1
+	(cd $(DESTDIR)$(MANDIR)/man1; $(LN) -s tauthon$(VERSION).1 tauthon2.1)
+	-rm -f $(DESTDIR)$(MANDIR)/man1/tauthon.1
+	(cd $(DESTDIR)$(MANDIR)/man1; $(LN) -s tauthon2.1 tauthon.1)
 
 # Install the library
 PLATDIR=	@PLATDIR@
@@ -1167,7 +1167,7 @@ $(srcdir)/Lib/$(PLATDIR):
 	if [ -n "$(MULTIARCH)" ]; then export MULTIARCH; MULTIARCH=$(MULTIARCH); fi; \
 	export PYTHON_FOR_BUILD; \
 	if [ "$(build)" = "$(host)" ]; then \
-	  PYTHON_FOR_BUILD="$(BUILDPYTHON)"; \
+	  PYTHON_FOR_BUILD="$(BUILDTAUTHON)"; \
 	else \
 	  PYTHON_FOR_BUILD="$(PYTHON_FOR_BUILD)"; \
 	fi; \
@@ -1176,7 +1176,7 @@ $(srcdir)/Lib/$(PLATDIR):
 python-config: $(srcdir)/Misc/python-config.in
 	# Substitution happens here, as the completely-expanded BINDIR
 	# is not available in configure
-	sed -e "s,@EXENAME@,$(BINDIR)/python$(VERSION)$(EXE)," < $(srcdir)/Misc/python-config.in >python-config
+	sed -e "s,@EXENAME@,$(BINDIR)/tauthon$(VERSION)$(EXE)," < $(srcdir)/Misc/python-config.in >python-config
 
 # Install the include files
 INCLDIRSTOMAKE=$(INCLUDEDIR) $(CONFINCLUDEDIR) $(INCLUDEPY) $(CONFINCLUDEPY)
@@ -1231,7 +1231,7 @@ libainstall:	@DEF_MAKE_RULE@ python-config
 	$(INSTALL_DATA) Modules/Setup $(DESTDIR)$(LIBPL)/Setup
 	$(INSTALL_DATA) Modules/Setup.local $(DESTDIR)$(LIBPL)/Setup.local
 	$(INSTALL_DATA) Modules/Setup.config $(DESTDIR)$(LIBPL)/Setup.config
-	$(INSTALL_DATA) Misc/python.pc $(DESTDIR)$(LIBPC)/python-$(VERSION).pc
+	$(INSTALL_DATA) Misc/python.pc $(DESTDIR)$(LIBPC)/tauthon-$(VERSION).pc
 	$(INSTALL_SCRIPT) $(srcdir)/Modules/makesetup $(DESTDIR)$(LIBPL)/makesetup
 	$(INSTALL_SCRIPT) $(srcdir)/install-sh $(DESTDIR)$(LIBPL)/install-sh
 	$(INSTALL_SCRIPT) python-config $(DESTDIR)$(BINDIR)/python$(VERSION)-config
@@ -1274,12 +1274,12 @@ sharedinstall: sharedmods
 	-rm $(DESTDIR)$(DESTSHARED)/_sysconfigdata.py*
 
 # Here are a couple of targets for MacOSX again, to install a full
-# framework-based Python. frameworkinstall installs everything, the
+# framework-based Tauthon. frameworkinstall installs everything, the
 # subtargets install specific parts. Much of the actual work is offloaded to
 # the Makefile in Mac
 #
 #
-# This target is here for backward compatibility, previous versions of Python
+# This target is here for backward compatibility, previous versions of Tauthon
 # hadn't integrated framework installation in the normal install process.
 frameworkinstall: install
 
@@ -1305,7 +1305,7 @@ frameworkinstallstructure:	$(LDLIBRARY)
 		fi; \
 	done
 	$(LN) -fsn include/python$(VERSION) $(DESTDIR)$(prefix)/Headers
-	sed 's/%VERSION%/'"`$(RUNSHARED) ./$(BUILDPYTHON) -c 'import platform; print platform.python_version()'`"'/g' < $(RESSRCDIR)/Info.plist > $(DESTDIR)$(prefix)/Resources/Info.plist
+	sed 's/%VERSION%/'"`$(RUNSHARED) ./$(BUILDTAUTHON) -c 'import platform; print platform.python_version()'`"'/g' < $(RESSRCDIR)/Info.plist > $(DESTDIR)$(prefix)/Resources/Info.plist
 	$(LN) -fsn $(VERSION) $(DESTDIR)$(PYTHONFRAMEWORKINSTALLDIR)/Versions/Current
 	$(LN) -fsn Versions/Current/$(PYTHONFRAMEWORK) $(DESTDIR)$(PYTHONFRAMEWORKINSTALLDIR)/$(PYTHONFRAMEWORK)
 	$(LN) -fsn Versions/Current/Headers $(DESTDIR)$(PYTHONFRAMEWORKINSTALLDIR)/Headers
@@ -1316,16 +1316,16 @@ frameworkinstallstructure:	$(LDLIBRARY)
 # Install a number of symlinks to keep software that expects a normal unix
 # install (which includes python-config) happy.
 frameworkinstallmaclib:
-	ln -fs "../../../$(PYTHONFRAMEWORK)" "$(DESTDIR)$(prefix)/lib/python$(VERSION)/config/libpython$(VERSION).a"
-	ln -fs "../../../$(PYTHONFRAMEWORK)" "$(DESTDIR)$(prefix)/lib/python$(VERSION)/config/libpython$(VERSION).dylib"
-	ln -fs "../$(PYTHONFRAMEWORK)" "$(DESTDIR)$(prefix)/lib/libpython$(VERSION).dylib"
+	ln -fs "../../../$(PYTHONFRAMEWORK)" "$(DESTDIR)$(prefix)/lib/tauthon$(VERSION)/config/libtauthon$(VERSION).a"
+	ln -fs "../../../$(PYTHONFRAMEWORK)" "$(DESTDIR)$(prefix)/lib/tauthon$(VERSION)/config/libtauthon$(VERSION).dylib"
+	ln -fs "../$(PYTHONFRAMEWORK)" "$(DESTDIR)$(prefix)/lib/libtauthon$(VERSION).dylib"
 	cd Mac && $(MAKE) installmacsubtree DESTDIR="$(DESTDIR)"
 
 # This installs the IDE, the Launcher and other apps into /Applications
 frameworkinstallapps:
 	cd Mac && $(MAKE) installapps DESTDIR="$(DESTDIR)"
 
-# This install the unix python and pythonw tools in /usr/local/bin
+# This install the unix tauthon and tauthonw tools in /usr/local/bin
 frameworkinstallunixtools:
 	cd Mac && $(MAKE) installunixtools DESTDIR="$(DESTDIR)"
 
@@ -1354,7 +1354,7 @@ Makefile.pre: Makefile.pre.in config.status
 config.status:	$(srcdir)/configure
 	$(SHELL) $(srcdir)/configure $(CONFIG_ARGS)
 
-.PRECIOUS: config.status $(BUILDPYTHON) Makefile Makefile.pre
+.PRECIOUS: config.status $(BUILDTAUTHON) Makefile Makefile.pre
 
 # Some make's put the object file in the current directory
 .c.o:
@@ -1362,7 +1362,7 @@ config.status:	$(srcdir)/configure
 
 # Run reindent on the library
 reindent:
-	./$(BUILDPYTHON) $(srcdir)/Tools/scripts/reindent.py -r $(srcdir)/Lib
+	./$(BUILDTAUTHON) $(srcdir)/Tools/scripts/reindent.py -r $(srcdir)/Lib
 
 # Rerun configure with the same options as it was run last time,
 # provided the config.status script exists
@@ -1411,7 +1411,7 @@ profile-removal:
 	find . -name '*.dyn' -exec rm -f {} ';'
 
 clobber: clean profile-removal
-	-rm -f $(BUILDPYTHON) $(PGEN) $(LIBRARY) $(LDLIBRARY) $(DLLLIBRARY) \
+	-rm -f $(BUILDTAUTHON) $(PGEN) $(LIBRARY) $(LDLIBRARY) $(DLLLIBRARY) \
 		tags TAGS \
 		config.cache config.log pyconfig.h Modules/config.c
 	-rm -rf build platform
@@ -1427,7 +1427,7 @@ distclean: clobber
 	-rm -f core Makefile Makefile.pre config.status \
 		Modules/Setup Modules/Setup.local Modules/Setup.config \
 		Modules/ld_so_aix Modules/python.exp Misc/python.pc
-	-rm -f python*-gdb.py
+	-rm -f tauthon*-gdb.py
 	-rm -f pybuilddir.txt
 	# Issue #28258: set LC_ALL to avoid issues with Estonian locale.
 	# Expansion is performed here by shell (spawned by make) itself before
@@ -1475,7 +1475,7 @@ funny:
 
 # Perform some verification checks on any modified files.
 patchcheck:
-	$(RUNSHARED) ./$(BUILDPYTHON) $(srcdir)/Tools/scripts/patchcheck.py
+	$(RUNSHARED) ./$(BUILDTAUTHON) $(srcdir)/Tools/scripts/patchcheck.py
 
 # Dependencies
 
diff --git a/Misc/python-config.in b/Misc/python-config.in
index 9ee0fdff48..92c7a0ac3c 100644
--- a/Misc/python-config.in
+++ b/Misc/python-config.in
@@ -44,7 +44,7 @@ for opt in opt_flags:
         print ' '.join(flags)
 
     elif opt in ('--libs', '--ldflags'):
-        libs = ['-lpython' + pyver]
+        libs = ['-ltauthon' + pyver]
         libs += getvar('LIBS').split()
         libs += getvar('SYSLIBS').split()
         # add the prefix/lib/pythonX.Y/config dir, but only if there is no
diff --git a/Misc/python.man b/Misc/python.man
index eacbc8dec4..28c19e8d3b 100644
--- a/Misc/python.man
+++ b/Misc/python.man
@@ -1,12 +1,12 @@
-.TH PYTHON "1"
+.TH TAUTHON "1"
 
 .\" To view this file while editing, run it through groff:
 .\"   groff -Tascii -man python.man | less
 
 .SH NAME
-python \- an interpreted, interactive, object-oriented programming language
+tauthon \- an interpreted, interactive, object-oriented programming language
 .SH SYNOPSIS
-.B python
+.B tauthon
 [
 .B \-B
 ]
@@ -85,25 +85,25 @@ python \- an interpreted, interactive, object-oriented programming language
 .I arguments
 ]
 .SH DESCRIPTION
-Python is an interpreted, interactive, object-oriented programming
+Tauthon is an interpreted, interactive, object-oriented programming
 language that combines remarkable power with very clear syntax.
-For an introduction to programming in Python, see the Python Tutorial.
-The Python Library Reference documents built-in and standard types,
+For an introduction to programming in Tauthon, see the Tauthon Tutorial.
+The Tauthon Library Reference documents built-in and standard types,
 constants, functions and modules.
-Finally, the Python Reference Manual describes the syntax and
+Finally, the Tauthon Reference Manual describes the syntax and
 semantics of the core language in (perhaps too) much detail.
 (These documents may be located via the
 .B "INTERNET RESOURCES"
 below; they may be installed on your system as well.)
 .PP
-Python's basic power can be extended with your own modules written in
+Tauthon's basic power can be extended with your own modules written in
 C or C++.
 On most systems such modules may be dynamically loaded.
-Python is also adaptable as an extension language for existing
+Tauthon is also adaptable as an extension language for existing
 applications.
 See the internal documentation for hints.
 .PP
-Documentation for installed Python modules and packages can be 
+Documentation for installed Tauthon modules and packages can be 
 viewed by running the 
 .B pydoc
 program.  
@@ -156,7 +156,7 @@ Discard docstrings in addition to the \fB-O\fP optimizations.
 .B \-R
 Turn on "hash randomization", so that the hash() values of str, bytes and
 datetime objects are "salted" with an unpredictable pseudo-random value.
-Although they remain constant within an individual Python process, they are
+Although they remain constant within an individual Tauthon process, they are
 not predictable between repeated invocations of Python.
 .IP
 This is intended to provide protection against a denial of service
@@ -205,10 +205,10 @@ searching for a module.  Also provides information on module cleanup
 at exit.
 .TP
 .B \-V ", " \-\-version
-Prints the Python version number of the executable and exits.
+Prints the Tauthon version number of the executable and exits.
 .TP
 .BI "\-W " argument
-Warning control.  Python sometimes prints warning message to
+Warning control.  Tauthon sometimes prints warning message to
 .IR sys.stderr .
 A typical warning message has the following form:
 .IB file ":" line ": " category ": " message.
@@ -222,7 +222,7 @@ Invalid
 .B \-W
 options are ignored (a warning message is printed about invalid
 options when the first warning is issued).  Warnings can also be
-controlled from within a Python program using the
+controlled from within a Tauthon program using the
 .I warnings
 module.
 
@@ -290,17 +290,17 @@ from that file;
 when called with
 .B \-c
 .IR command ,
-it executes the Python statement(s) given as
+it executes the Tauthon statement(s) given as
 .IR command .
 Here
 .I command
 may contain multiple statements separated by newlines.
-Leading whitespace is significant in Python statements!
+Leading whitespace is significant in Tauthon statements!
 In non-interactive mode, the entire input is parsed before it is
 executed.
 .PP
 If available, the script name and additional arguments thereafter are
-passed to the script in the Python variable
+passed to the script in the Tauthon variable
 .IR sys.argv ,
 which is a list of strings (you must first
 .I import sys
@@ -313,7 +313,7 @@ is used,
 .I sys.argv[0]
 contains the string
 .I '-c'.
-Note that options interpreted by the Python interpreter itself
+Note that options interpreted by the Tauthon interpreter itself
 are not placed in
 .IR sys.argv .
 .PP
@@ -338,23 +338,23 @@ These are subject to difference depending on local installation
 conventions; ${prefix} and ${exec_prefix} are installation-dependent
 and should be interpreted as for GNU software; they may be the same.
 The default for both is \fI/usr/local\fP.
-.IP \fI${exec_prefix}/bin/python\fP
+.IP \fI${exec_prefix}/bin/tauthon\fP
 Recommended location of the interpreter.
 .PP
-.I ${prefix}/lib/python<version>
+.I ${prefix}/lib/tauthon<version>
 .br
-.I ${exec_prefix}/lib/python<version>
+.I ${exec_prefix}/lib/tauthon<version>
 .RS
 Recommended locations of the directories containing the standard
 modules.
 .RE
 .PP
-.I ${prefix}/include/python<version>
+.I ${prefix}/include/tauthon<version>
 .br
-.I ${exec_prefix}/include/python<version>
+.I ${exec_prefix}/include/tauthon<version>
 .RS
 Recommended locations of the directories containing the include files
-needed for developing Python extensions and embedding the
+needed for developing Tauthon extensions and embedding the
 interpreter.
 .RE
 .IP \fI~/.pythonrc.py\fP
@@ -362,9 +362,9 @@ User-specific initialization file loaded by the \fIuser\fP module;
 not used by default or by most applications.
 .SH ENVIRONMENT VARIABLES
 .IP PYTHONHOME
-Change the location of the standard Python libraries.  By default, the
-libraries are searched in ${prefix}/lib/python<version> and
-${exec_prefix}/lib/python<version>, where ${prefix} and ${exec_prefix}
+Change the location of the standard Tauthon libraries.  By default, the
+libraries are searched in ${prefix}/lib/tauthon<version> and
+${exec_prefix}/lib/tauthon<version>, where ${prefix} and ${exec_prefix}
 are installation-dependent directories, both defaulting to
 \fI/usr/local\fP.  When $PYTHONHOME is set to a single directory, its value
 replaces both ${prefix} and ${exec_prefix}.  To specify different values
@@ -375,15 +375,15 @@ The format is the same as the shell's $PATH: one or more directory
 pathnames separated by colons.
 Non-existent directories are silently ignored.
 The default search path is installation dependent, but generally
-begins with ${prefix}/lib/python<version> (see PYTHONHOME above).
+begins with ${prefix}/lib/tauthon<version> (see PYTHONHOME above).
 The default search path is always appended to $PYTHONPATH.
 If a script argument is given, the directory containing the script is
 inserted in the path in front of $PYTHONPATH.
-The search path can be manipulated from within a Python program as the
+The search path can be manipulated from within a Tauthon program as the
 variable
 .IR sys.path .
 .IP PYTHONSTARTUP
-If this is the name of a readable file, the Python commands in that
+If this is the name of a readable file, the Tauthon commands in that
 file are executed before the first prompt is displayed in interactive
 mode.
 The file is executed in the same name space where interactive commands
@@ -445,7 +445,7 @@ bytes and datetime objects.
 If PYTHONHASHSEED is set to an integer value, it is used as a fixed seed for
 generating the hash() of the types covered by the hash randomization.  Its
 purpose is to allow repeatable hashing, such as for selftests for the
-interpreter itself, or to allow a cluster of python processes to share hash
+interpreter itself, or to allow a cluster of tauthon processes to share hash
 values.
 
 The integer must be a decimal number in the range [0,4294967295].  Specifying
@@ -454,19 +454,19 @@ disabled.
 .SH AUTHOR
 The Python Software Foundation: https://www.python.org/psf/
 .SH INTERNET RESOURCES
-Main website:  https://www.python.org/
+Main website:  https://github.com/naftaliharris/tauthon/
+.br
+Original website:  https://www.python.org/
 .br
 Documentation:  https://docs.python.org/2/
 .br
 Developer resources:  https://docs.python.org/devguide/
 .br
-Downloads:  https://www.python.org/downloads/
-.br
 Module repository:  https://pypi.python.org/
 .br
 Newsgroups:  comp.lang.python, comp.lang.python.announce
 .SH LICENSING
-Python is distributed under an Open Source license.  See the file
-"LICENSE" in the Python source distribution for information on terms &
-conditions for accessing and otherwise using Python and for a
+Tauthon is distributed under an Open Source license.  See the file
+"LICENSE" in the Tauthon source distribution for information on terms &
+conditions for accessing and otherwise using Tauthon and for a
 DISCLAIMER OF ALL WARRANTIES.
diff --git a/Misc/python.pc.in b/Misc/python.pc.in
index 08481a9580..a4cf447fea 100644
--- a/Misc/python.pc.in
+++ b/Misc/python.pc.in
@@ -3,11 +3,11 @@ exec_prefix=@exec_prefix@
 libdir=@libdir@
 includedir=@includedir@
 
-Name: Python
-Description: Python library
+Name: Tauthon
+Description: Tauthon library
 Requires: 
 Version: @VERSION@
 Libs.private: @LIBS@
-Libs: -L${libdir} -lpython@VERSION@
-Cflags: -I${includedir}/python@VERSION@ 
+Libs: -L${libdir} -ltauthon@VERSION@
+Cflags: -I${includedir}/tauthon@VERSION@ 
 
diff --git a/Modules/getpath.c b/Modules/getpath.c
index c42ce31178..f27cf473f7 100644
--- a/Modules/getpath.c
+++ b/Modules/getpath.c
@@ -108,7 +108,7 @@ static char prefix[MAXPATHLEN+1];
 static char exec_prefix[MAXPATHLEN+1];
 static char progpath[MAXPATHLEN+1];
 static char *module_search_path = NULL;
-static char lib_python[] = "lib/python" VERSION;
+static char lib_python[] = "lib/tauthon" VERSION;
 
 static void
 reduce(char *dir)
@@ -520,7 +520,7 @@ calculate_path(void)
     }
     else
         strncpy(zip_path, PREFIX, MAXPATHLEN);
-    joinpath(zip_path, "lib/python00.zip");
+    joinpath(zip_path, "lib/tauthon00.zip");
     bufsz = strlen(zip_path);   /* Replace "00" with version */
     zip_path[bufsz - 6] = VERSION[0];
     zip_path[bufsz - 5] = VERSION[2];
diff --git a/Modules/makesetup b/Modules/makesetup
index db5c47ee04..500a20aebd 100755
--- a/Modules/makesetup
+++ b/Modules/makesetup
@@ -91,7 +91,7 @@ CYGWIN*) if test $libdir = .
 	 else
 	 	ExtraLibDir='$(LIBPL)'
 	 fi
-	 ExtraLibs="-L$ExtraLibDir -lpython\$(VERSION)";;
+	 ExtraLibs="-L$ExtraLibDir -ltauthon\$(VERSION)";;
 esac
 
 # Main loop
diff --git a/configure b/configure
index 060ea54fae..465dba5cf4 100755
--- a/configure
+++ b/configure
@@ -1,9 +1,9 @@
 #! /bin/sh
 # From configure.ac Revision.
 # Guess values for system-dependent variables and create Makefiles.
-# Generated by GNU Autoconf 2.69 for python 2.8.
+# Generated by GNU Autoconf 2.69 for tauthon 2.8.
 #
-# Report bugs to <https://bugs.python.org/>.
+# Report bugs to <https://github.com/naftaliharris/tauthon>.
 #
 #
 # Copyright (C) 1992-1996, 1998-2012 Free Software Foundation, Inc.
@@ -268,10 +268,10 @@ fi
     $as_echo "$0: be upgraded to zsh 4.3.4 or later."
   else
     $as_echo "$0: Please tell bug-autoconf@gnu.org and
-$0: https://bugs.python.org/ about your system, including
-$0: any error possibly output before this message. Then
-$0: install a modern shell, or manually run the script
-$0: under such a shell if you do have one."
+$0: https://github.com/naftaliharris/tauthon about your
+$0: system, including any error possibly output before this
+$0: message. Then install a modern shell, or manually run
+$0: the script under such a shell if you do have one."
   fi
   exit 1
 fi
@@ -579,11 +579,11 @@ MFLAGS=
 MAKEFLAGS=
 
 # Identity of this package.
-PACKAGE_NAME='python'
-PACKAGE_TARNAME='python'
+PACKAGE_NAME='tauthon'
+PACKAGE_TARNAME='tauthon'
 PACKAGE_VERSION='2.8'
-PACKAGE_STRING='python 2.8'
-PACKAGE_BUGREPORT='https://bugs.python.org/'
+PACKAGE_STRING='tauthon 2.8'
+PACKAGE_BUGREPORT='https://github.com/naftaliharris/tauthon'
 PACKAGE_URL=''
 
 ac_unique_file="Include/object.h"
@@ -1382,7 +1382,7 @@ if test "$ac_init_help" = "long"; then
   # Omit some internal or obsolete options to make the list less imposing.
   # This message is too long to be a string in the A/UX 3.1 sh.
   cat <<_ACEOF
-\`configure' configures python 2.8 to adapt to many kinds of systems.
+\`configure' configures tauthon 2.8 to adapt to many kinds of systems.
 
 Usage: $0 [OPTION]... [VAR=VALUE]...
 
@@ -1430,7 +1430,7 @@ Fine tuning of the installation directories:
   --infodir=DIR           info documentation [DATAROOTDIR/info]
   --localedir=DIR         locale-dependent data [DATAROOTDIR/locale]
   --mandir=DIR            man documentation [DATAROOTDIR/man]
-  --docdir=DIR            documentation root [DATAROOTDIR/doc/python]
+  --docdir=DIR            documentation root [DATAROOTDIR/doc/tauthon]
   --htmldir=DIR           html documentation [DOCDIR]
   --dvidir=DIR            dvi documentation [DOCDIR]
   --pdfdir=DIR            pdf documentation [DOCDIR]
@@ -1448,7 +1448,7 @@ fi
 
 if test -n "$ac_init_help"; then
   case $ac_init_help in
-     short | recursive ) echo "Configuration of python 2.8:";;
+     short | recursive ) echo "Configuration of tauthon 2.8:";;
    esac
   cat <<\_ACEOF
 
@@ -1462,8 +1462,8 @@ Optional Features:
                           Build (MacOSX|Darwin) framework
   --enable-shared         disable/enable building shared python library
   --enable-profiling      enable C-level code profiling
-  --enable-optimizations  Enable expensive optimizations (PGO, maybe LTO,
-                          etc). Disabled by default.
+  --enable-optimizations  Enable expensive optimizations (PGO, etc). Disabled
+                          by default.
   --enable-toolbox-glue   disable/enable MacOSX glue code for extensions
   --enable-ipv6           Enable ipv6 (with ipv4) support
   --disable-ipv6          Disable ipv6 support
@@ -1543,7 +1543,7 @@ Some influential environment variables:
 Use these variables to override the choices made by `configure' or to help
 it to find libraries and programs with nonstandard names/locations.
 
-Report bugs to <https://bugs.python.org/>.
+Report bugs to <https://github.com/naftaliharris/tauthon>.
 _ACEOF
 ac_status=$?
 fi
@@ -1606,7 +1606,7 @@ fi
 test -n "$ac_init_help" && exit $ac_status
 if $ac_init_version; then
   cat <<\_ACEOF
-python configure 2.8
+tauthon configure 2.8
 generated by GNU Autoconf 2.69
 
 Copyright (C) 2012 Free Software Foundation, Inc.
@@ -1765,9 +1765,9 @@ $as_echo "$as_me: WARNING: $2: see the Autoconf documentation" >&2;}
 $as_echo "$as_me: WARNING: $2:     section \"Present But Cannot Be Compiled\"" >&2;}
     { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: $2: proceeding with the compiler's result" >&5
 $as_echo "$as_me: WARNING: $2: proceeding with the compiler's result" >&2;}
-( $as_echo "## --------------------------------------- ##
-## Report this to https://bugs.python.org/ ##
-## --------------------------------------- ##"
+( $as_echo "## ------------------------------------------------------- ##
+## Report this to https://github.com/naftaliharris/tauthon ##
+## ------------------------------------------------------- ##"
      ) | sed "s/^/$as_me: WARNING:     /" >&2
     ;;
 esac
@@ -2445,7 +2445,7 @@ cat >config.log <<_ACEOF
 This file contains any messages produced by compilers while
 running configure, to aid debugging if configure makes a mistake.
 
-It was created by python $as_me 2.8, which was
+It was created by tauthon $as_me 2.8, which was
 generated by GNU Autoconf 2.69.  Invocation command line was
 
   $ $0 $@
@@ -2903,7 +2903,7 @@ case $host_os in *\ *) host_os=`echo "$host_os" | sed 's/ /-/g'`;; esac
 # pybuilddir.txt will be created by --generate-posix-vars in the Makefile
 rm -f pybuilddir.txt
 
-for ac_prog in python$PACKAGE_VERSION python3 python
+for ac_prog in tauthon$PACKAGE_VERSION tauthon python$PACKAGE_VERSION python3 python
 do
   # Extract the first word of "$ac_prog", so it can be a program name with args.
 set dummy $ac_prog; ac_word=$2
@@ -2949,18 +2949,18 @@ test -n "$PYTHON_FOR_REGEN" || PYTHON_FOR_REGEN="python3"
 
 
 if test "$cross_compiling" = yes; then
-    { $as_echo "$as_me:${as_lineno-$LINENO}: checking for python interpreter for cross build" >&5
-$as_echo_n "checking for python interpreter for cross build... " >&6; }
+    { $as_echo "$as_me:${as_lineno-$LINENO}: checking for tauthon/python interpreter for cross build" >&5
+$as_echo_n "checking for tauthon/python interpreter for cross build... " >&6; }
     if test -z "$PYTHON_FOR_BUILD"; then
-        for interp in python$PACKAGE_VERSION python2 python; do
+        for interp in tauthon$PACKAGE_VERSION tauthon python$PACKAGE_VERSION python2 python; do
 	    which $interp >/dev/null 2>&1 || continue
-	    if $interp -c 'import sys;sys.exit(not (sys.version_info[:2] >= (2,7) and sys.version_info[0] < 3))'; then
+	    if $interp -c 'import sys;sys.exit(not (sys.version_info[:2] >= (2,8) and sys.version_info[0] < 3))'; then
 	        break
 	    fi
             interp=
 	done
         if test x$interp = x; then
-	    as_fn_error $? "python$PACKAGE_VERSION interpreter not found" "$LINENO" 5
+	    as_fn_error $? "tauthon$PACKAGE_VERSION/python$PACKAGE_VERSION interpreter not found" "$LINENO" 5
 	fi
         { $as_echo "$as_me:${as_lineno-$LINENO}: result: $interp" >&5
 $as_echo "$interp" >&6; }
@@ -2969,7 +2969,7 @@ $as_echo "$interp" >&6; }
 elif test "$cross_compiling" = maybe; then
     as_fn_error $? "Cross compiling required --host=HOST-TUPLE and --build=ARCH" "$LINENO" 5
 else
-    PYTHON_FOR_BUILD='./$(BUILDPYTHON) -E'
+    PYTHON_FOR_BUILD='./$(BUILDTAUTHON) -E'
 fi
 
 
@@ -5310,7 +5310,7 @@ esac
 $as_echo_n "checking LIBRARY... " >&6; }
 if test -z "$LIBRARY"
 then
-	LIBRARY='libpython$(VERSION).a'
+	LIBRARY='libtauthon$(VERSION).a'
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $LIBRARY" >&5
 $as_echo "$LIBRARY" >&6; }
@@ -5469,21 +5469,21 @@ $as_echo "#define Py_ENABLE_SHARED 1" >>confdefs.h
 
   case $ac_sys_system in
     BeOS*)
-          LDLIBRARY='libpython$(VERSION).so'
+          LDLIBRARY='libtauthon$(VERSION).so'
           ;;
     CYGWIN*)
-          LDLIBRARY='libpython$(VERSION).dll.a'
-          DLLLIBRARY='libpython$(VERSION).dll'
+          LDLIBRARY='libtauthon$(VERSION).dll.a'
+          DLLLIBRARY='libtauthon$(VERSION).dll'
           ;;
     SunOS*)
-	  LDLIBRARY='libpython$(VERSION).so'
-	  BLDLIBRARY='-Wl,-R,$(LIBDIR) -L. -lpython$(VERSION)'
+	  LDLIBRARY='libtauthon$(VERSION).so'
+	  BLDLIBRARY='-Wl,-R,$(LIBDIR) -L. -ltauthon$(VERSION)'
 	  RUNSHARED=LD_LIBRARY_PATH=`pwd`${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}
 	  INSTSONAME="$LDLIBRARY".$SOVERSION
           ;;
     Linux*|GNU*|NetBSD*|FreeBSD*|DragonFly*|OpenBSD*)
-	  LDLIBRARY='libpython$(VERSION).so'
-	  BLDLIBRARY='-L. -lpython$(VERSION)'
+	  LDLIBRARY='libtauthon$(VERSION).so'
+	  BLDLIBRARY='-L. -ltauthon$(VERSION)'
 	  RUNSHARED=LD_LIBRARY_PATH=`pwd`${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}
 	  case $ac_sys_system in
 	      FreeBSD*)
@@ -5495,32 +5495,32 @@ $as_echo "#define Py_ENABLE_SHARED 1" >>confdefs.h
     hp*|HP*)
 	  case `uname -m` in
 		ia64)
-			LDLIBRARY='libpython$(VERSION).so'
+			LDLIBRARY='libtauthon$(VERSION).so'
 			;;
 		*)
-			LDLIBRARY='libpython$(VERSION).sl'
+			LDLIBRARY='libtauthon$(VERSION).sl'
 			;;
 	  esac
-	  BLDLIBRARY='-Wl,+b,$(LIBDIR) -L. -lpython$(VERSION)'
+	  BLDLIBRARY='-Wl,+b,$(LIBDIR) -L. -ltauthon$(VERSION)'
 	  RUNSHARED=SHLIB_PATH=`pwd`${SHLIB_PATH:+:${SHLIB_PATH}}
 	  ;;
     OSF*)
-	  LDLIBRARY='libpython$(VERSION).so'
-	  BLDLIBRARY='-rpath $(LIBDIR) -L. -lpython$(VERSION)'
+	  LDLIBRARY='libtauthon$(VERSION).so'
+	  BLDLIBRARY='-rpath $(LIBDIR) -L. -ltauthon$(VERSION)'
 	  RUNSHARED=LD_LIBRARY_PATH=`pwd`${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}
 	  ;;
     atheos*)
-	  LDLIBRARY='libpython$(VERSION).so'
-	  BLDLIBRARY='-L. -lpython$(VERSION)'
+	  LDLIBRARY='libtauthon$(VERSION).so'
+	  BLDLIBRARY='-L. -ltauthon$(VERSION)'
 	  RUNSHARED=DLL_PATH=`pwd`:${DLL_PATH:-/atheos/sys/libs:/atheos/autolnk/lib}
 	  ;;
     Darwin*)
-    	LDLIBRARY='libpython$(VERSION).dylib'
-	BLDLIBRARY='-L. -lpython$(VERSION)'
+    	LDLIBRARY='libtauthon$(VERSION).dylib'
+	BLDLIBRARY='-L. -ltauthon$(VERSION)'
 	RUNSHARED=DYLD_LIBRARY_PATH=`pwd`${DYLD_LIBRARY_PATH:+:${DYLD_LIBRARY_PATH}}
 	;;
     AIX*)
-	LDLIBRARY='libpython$(VERSION).so'
+	LDLIBRARY='libtauthon$(VERSION).so'
 	RUNSHARED=LIBPATH=`pwd`${LIBPATH:+:${LIBPATH}}
 	;;
 
@@ -5529,7 +5529,7 @@ else # shared is disabled
   case $ac_sys_system in
     CYGWIN*)
           BLDLIBRARY='$(LIBRARY)'
-          LDLIBRARY='libpython$(VERSION).dll.a'
+          LDLIBRARY='libtauthon$(VERSION).dll.a'
           ;;
   esac
 fi
@@ -8617,7 +8617,7 @@ then
 			LDCXXSHARED="$LDCXXSHARED "'$(PYTHONFRAMEWORKPREFIX)/$(PYTHONFRAMEWORKDIR)/Versions/$(VERSION)/$(PYTHONFRAMEWORK)'
 		else
 			# No framework, use the Python app as bundle-loader
-			BLDSHARED="$LDSHARED "'-bundle_loader $(BUILDPYTHON)'
+			BLDSHARED="$LDSHARED "'-bundle_loader $(BUILDTAUTHON)'
 			LDSHARED="$LDSHARED "'-bundle_loader $(BINDIR)/python$(VERSION)$(EXE)'
 			LDCXXSHARED="$LDCXXSHARED "'-bundle_loader $(BINDIR)/python$(VERSION)$(EXE)'
 		fi ;;
@@ -8642,7 +8642,7 @@ then
 				LDCXXSHARED="$LDCXXSHARED "'$(PYTHONFRAMEWORKPREFIX)/$(PYTHONFRAMEWORKDIR)/Versions/$(VERSION)/$(PYTHONFRAMEWORK)'
 			else
 				# No framework, use the Python app as bundle-loader
-				BLDSHARED="$LDSHARED "'-bundle_loader $(BUILDPYTHON)'
+				BLDSHARED="$LDSHARED "'-bundle_loader $(BUILDTAUTHON)'
 				LDSHARED="$LDSHARED "'-bundle_loader $(BINDIR)/python$(VERSION)$(EXE)'
 				LDCXXSHARED="$LDCXXSHARED "'-bundle_loader $(BINDIR)/python$(VERSION)$(EXE)'
 			fi
@@ -15929,7 +15929,7 @@ cat >>$CONFIG_STATUS <<\_ACEOF || ac_write_fail=1
 # report actual input values of CONFIG_FILES etc. instead of their
 # values after options handling.
 ac_log="
-This file was extended by python $as_me 2.8, which was
+This file was extended by tauthon $as_me 2.8, which was
 generated by GNU Autoconf 2.69.  Invocation command line was
 
   CONFIG_FILES    = $CONFIG_FILES
@@ -15985,13 +15985,13 @@ $config_files
 Configuration headers:
 $config_headers
 
-Report bugs to <https://bugs.python.org/>."
+Report bugs to <https://github.com/naftaliharris/tauthon>."
 
 _ACEOF
 cat >>$CONFIG_STATUS <<_ACEOF || ac_write_fail=1
 ac_cs_config="`$as_echo "$ac_configure_args" | sed 's/^ //; s/[\\""\`\$]/\\\\&/g'`"
 ac_cs_version="\\
-python config.status 2.8
+tauthon config.status 2.8
 configured by $0, generated by GNU Autoconf 2.69,
   with options \\"\$ac_cs_config\\"
 
@@ -16761,7 +16761,7 @@ if test "$Py_OPT" = 'false' -a "$Py_DEBUG" != 'true'; then
     echo "" >&6
     echo "" >&6
     echo "If you want a release build with all optimizations active (LTO, PGO, etc),"
-    echo "please run ./configure --enable-optimizations" >&6
+    echo "please run ./configure --enable-optimizations --with-lto" >&6
     echo "" >&6
     echo "" >&6
 fi
diff --git a/configure.ac b/configure.ac
index 85b858d831..5c67db20f5 100644
--- a/configure.ac
+++ b/configure.ac
@@ -3,12 +3,12 @@ dnl * Please run autoreconf to test your changes! *
 dnl ***********************************************
 
 # Set VERSION so we only need to edit in one place (i.e., here)
-m4_define(PYTHON_VERSION, 2.8)
+m4_define(TAUTHON_VERSION, 2.8)
 
 AC_PREREQ(2.65)
 
 AC_REVISION($Revision$)
-AC_INIT(python, PYTHON_VERSION, https://bugs.python.org/)
+AC_INIT(tauthon, TAUTHON_VERSION, https://github.com/naftaliharris/tauthon)
 AC_CONFIG_SRCDIR([Include/object.h])
 AC_CONFIG_HEADER(pyconfig.h)
 
@@ -19,21 +19,21 @@ AC_SUBST(host)
 # pybuilddir.txt will be created by --generate-posix-vars in the Makefile
 rm -f pybuilddir.txt
 
-AC_CHECK_PROGS(PYTHON_FOR_REGEN, python$PACKAGE_VERSION python3 python, python3)
+AC_CHECK_PROGS(PYTHON_FOR_REGEN, tauthon$PACKAGE_VERSION tauthon python$PACKAGE_VERSION python3 python, python3)
 AC_SUBST(PYTHON_FOR_REGEN)
 
 if test "$cross_compiling" = yes; then
-    AC_MSG_CHECKING([for python interpreter for cross build])
+    AC_MSG_CHECKING([for tauthon/python interpreter for cross build])
     if test -z "$PYTHON_FOR_BUILD"; then
-        for interp in python$PACKAGE_VERSION python2 python; do
+        for interp in tauthon$PACKAGE_VERSION tauthon python$PACKAGE_VERSION python2 python; do
 	    which $interp >/dev/null 2>&1 || continue
-	    if $interp -c 'import sys;sys.exit(not (sys.version_info@<:@:2@:>@ >= (2,7) and sys.version_info@<:@0@:>@ < 3))'; then
+	    if $interp -c 'import sys;sys.exit(not (sys.version_info@<:@:2@:>@ >= (2,8) and sys.version_info@<:@0@:>@ < 3))'; then
 	        break
 	    fi
             interp=
 	done
         if test x$interp = x; then
-	    AC_MSG_ERROR([python$PACKAGE_VERSION interpreter not found])
+	    AC_MSG_ERROR([tauthon$PACKAGE_VERSION/python$PACKAGE_VERSION interpreter not found])
 	fi
         AC_MSG_RESULT($interp)
 	PYTHON_FOR_BUILD='_PYTHON_PROJECT_BASE=$(abs_builddir) _PYTHON_HOST_PLATFORM=$(_PYTHON_HOST_PLATFORM) PYTHONPATH=$(shell test -f pybuilddir.txt && echo $(abs_builddir)/`cat pybuilddir.txt`:)$(srcdir)/Lib:$(srcdir)/Lib/$(PLATDIR) '$interp
@@ -41,7 +41,7 @@ if test "$cross_compiling" = yes; then
 elif test "$cross_compiling" = maybe; then
     AC_MSG_ERROR([Cross compiling required --host=HOST-TUPLE and --build=ARCH])
 else
-    PYTHON_FOR_BUILD='./$(BUILDPYTHON) -E'
+    PYTHON_FOR_BUILD='./$(BUILDTAUTHON) -E'
 fi
 AC_SUBST(PYTHON_FOR_BUILD)
 
@@ -76,7 +76,7 @@ rm confdefs.h
 mv confdefs.h.new confdefs.h
 
 AC_SUBST(VERSION)
-VERSION=PYTHON_VERSION
+VERSION=TAUTHON_VERSION
 
 AC_SUBST(SOVERSION)
 SOVERSION=1.0
@@ -431,7 +431,7 @@ case $ac_sys_system/$ac_sys_release in
   # From the perspective of Solaris, _XOPEN_SOURCE is not so much a
   # request to enable features supported by the standard as a request
   # to disable features not supported by the standard.  The best way
-  # for Python to use Solaris is simply to leave _XOPEN_SOURCE out
+  # for Tauthon to use Solaris is simply to leave _XOPEN_SOURCE out
   # entirely and define __EXTENSIONS__ instead.
   SunOS/*)
     define_xopen_source=no;;
@@ -661,7 +661,7 @@ AC_SUBST(MAINCC)
 AC_MSG_CHECKING(for --with-cxx-main=<compiler>)
 AC_ARG_WITH(cxx_main,
             AS_HELP_STRING([--with-cxx-main=<compiler>],
-                           [compile main() and link python executable with C++ compiler]),
+                           [compile main() and link tauthon executable with C++ compiler]),
 [
 	
 	case $withval in
@@ -778,7 +778,7 @@ AC_SUBST(LIBRARY)
 AC_MSG_CHECKING(LIBRARY)
 if test -z "$LIBRARY"
 then
-	LIBRARY='libpython$(VERSION).a'
+	LIBRARY='libtauthon$(VERSION).a'
 fi
 AC_MSG_RESULT($LIBRARY)
 
@@ -791,7 +791,7 @@ AC_MSG_RESULT($LIBRARY)
 # (defined in the Makefiles). On Cygwin LDLIBRARY is the import library,
 # DLLLIBRARY is the shared (i.e., DLL) library.
 # 
-# RUNSHARED is used to run shared python without installed libraries
+# RUNSHARED is used to run shared tauthon without installed libraries
 #
 # INSTSONAME is the name of the shared library that will be use to install
 # on the system - some systems like version suffix, others don't
@@ -808,10 +808,10 @@ DLLLIBRARY=''
 LDLIBRARYDIR=''
 RUNSHARED=''
 
-# LINKCC is the command that links the python executable -- default is $(CC).
+# LINKCC is the command that links the tauthon executable -- default is $(CC).
 # If CXX is set, and if it is needed to link a main function that was
 # compiled with CXX, LINKCC is CXX instead. Always using CXX is undesirable:
-# python might then depend on the C++ runtime
+# tauthon might then depend on the C++ runtime
 # This is altered for AIX in order to build the export list before 
 # linking.
 AC_SUBST(LINKCC)
@@ -856,7 +856,7 @@ AC_MSG_RESULT($GNULD)
 
 AC_MSG_CHECKING(for --enable-shared)
 AC_ARG_ENABLE(shared,
-              AS_HELP_STRING([--enable-shared], [disable/enable building shared python library]))
+              AS_HELP_STRING([--enable-shared], [disable/enable building shared tauthon library]))
 
 if test -z "$enable_shared"
 then 
@@ -894,7 +894,7 @@ AC_MSG_CHECKING(LDLIBRARY)
 # MacOSX framework builds need more magic. LDLIBRARY is the dynamic
 # library that we build, but we do not want to link against it (we
 # will find it with a -framework option). For this reason there is an
-# extra variable BLDLIBRARY against which Python and the extension
+# extra variable BLDLIBRARY against which Tauthon and the extension
 # modules are linked, BLDLIBRARY. This is normally the same as
 # LDLIBRARY, but empty for MacOSX framework builds.
 if test "$enable_framework"
@@ -908,24 +908,24 @@ fi
 
 # Other platforms follow
 if test $enable_shared = "yes"; then
-  AC_DEFINE(Py_ENABLE_SHARED, 1, [Defined if Python is built as a shared library.])
+  AC_DEFINE(Py_ENABLE_SHARED, 1, [Defined if Tauthon is built as a shared library.])
   case $ac_sys_system in
     BeOS*)
-          LDLIBRARY='libpython$(VERSION).so'
+          LDLIBRARY='libtauthon$(VERSION).so'
           ;;
     CYGWIN*)
-          LDLIBRARY='libpython$(VERSION).dll.a'
-          DLLLIBRARY='libpython$(VERSION).dll'
+          LDLIBRARY='libtauthon$(VERSION).dll.a'
+          DLLLIBRARY='libtauthon$(VERSION).dll'
           ;;
     SunOS*)
-	  LDLIBRARY='libpython$(VERSION).so'
-	  BLDLIBRARY='-Wl,-R,$(LIBDIR) -L. -lpython$(VERSION)'
+	  LDLIBRARY='libtauthon$(VERSION).so'
+	  BLDLIBRARY='-Wl,-R,$(LIBDIR) -L. -ltauthon$(VERSION)'
 	  RUNSHARED=LD_LIBRARY_PATH=`pwd`${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}
 	  INSTSONAME="$LDLIBRARY".$SOVERSION
           ;;
     Linux*|GNU*|NetBSD*|FreeBSD*|DragonFly*|OpenBSD*)
-	  LDLIBRARY='libpython$(VERSION).so'
-	  BLDLIBRARY='-L. -lpython$(VERSION)'
+	  LDLIBRARY='libtauthon$(VERSION).so'
+	  BLDLIBRARY='-L. -ltauthon$(VERSION)'
 	  RUNSHARED=LD_LIBRARY_PATH=`pwd`${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}
 	  case $ac_sys_system in
 	      FreeBSD*)
@@ -937,32 +937,32 @@ if test $enable_shared = "yes"; then
     hp*|HP*)
 	  case `uname -m` in
 		ia64)
-			LDLIBRARY='libpython$(VERSION).so'
+			LDLIBRARY='libtauthon$(VERSION).so'
 			;;
 		*)
-			LDLIBRARY='libpython$(VERSION).sl'
+			LDLIBRARY='libtauthon$(VERSION).sl'
 			;;
 	  esac
-	  BLDLIBRARY='-Wl,+b,$(LIBDIR) -L. -lpython$(VERSION)'
+	  BLDLIBRARY='-Wl,+b,$(LIBDIR) -L. -ltauthon$(VERSION)'
 	  RUNSHARED=SHLIB_PATH=`pwd`${SHLIB_PATH:+:${SHLIB_PATH}}
 	  ;;
     OSF*)
-	  LDLIBRARY='libpython$(VERSION).so'
-	  BLDLIBRARY='-rpath $(LIBDIR) -L. -lpython$(VERSION)'
+	  LDLIBRARY='libtauthon$(VERSION).so'
+	  BLDLIBRARY='-rpath $(LIBDIR) -L. -ltauthon$(VERSION)'
 	  RUNSHARED=LD_LIBRARY_PATH=`pwd`${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}
 	  ;;
     atheos*)
-	  LDLIBRARY='libpython$(VERSION).so'
-	  BLDLIBRARY='-L. -lpython$(VERSION)'
+	  LDLIBRARY='libtauthon$(VERSION).so'
+	  BLDLIBRARY='-L. -ltauthon$(VERSION)'
 	  RUNSHARED=DLL_PATH=`pwd`:${DLL_PATH:-/atheos/sys/libs:/atheos/autolnk/lib}
 	  ;;
     Darwin*)
-    	LDLIBRARY='libpython$(VERSION).dylib'
-	BLDLIBRARY='-L. -lpython$(VERSION)'
+    	LDLIBRARY='libtauthon$(VERSION).dylib'
+	BLDLIBRARY='-L. -ltauthon$(VERSION)'
 	RUNSHARED=DYLD_LIBRARY_PATH=`pwd`${DYLD_LIBRARY_PATH:+:${DYLD_LIBRARY_PATH}}
 	;;
     AIX*)
-	LDLIBRARY='libpython$(VERSION).so'
+	LDLIBRARY='libtauthon$(VERSION).so'
 	RUNSHARED=LIBPATH=`pwd`${LIBPATH:+:${LIBPATH}}
 	;;
 
@@ -971,7 +971,7 @@ else # shared is disabled
   case $ac_sys_system in
     CYGWIN*)
           BLDLIBRARY='$(LIBRARY)'
-          LDLIBRARY='libpython$(VERSION).dll.a'
+          LDLIBRARY='libtauthon$(VERSION).dll.a'
           ;;
   esac
 fi
@@ -1057,7 +1057,7 @@ fi],
 # Optimizer/debugger flags
 # ------------------------
 # (The following bit of code is complicated enough - please keep things
-# indented properly.  Just pretend you're editing Python code. ;-)
+# indented properly.  Just pretend you're editing Tauthon code. ;-)
 
 # There are two parallel sets of case statements below, one that checks to
 # see if OPT was set and one that does BASECFLAGS setting based upon
@@ -1120,7 +1120,7 @@ AC_SUBST(UNIVERSAL_ARCH_FLAGS)
 # tweak BASECFLAGS based on compiler and platform
 case $GCC in
 yes)
-    # Python violates C99 rules, by casting between incompatible
+    # Tauthon violates C99 rules, by casting between incompatible
     # pointer types. GCC may generate bad code as a result of that,
     # so use -fno-strict-aliasing if supported.
     AC_MSG_CHECKING(whether $CC accepts -fno-strict-aliasing)
@@ -1398,7 +1398,7 @@ AC_SUBST(DEF_MAKE_ALL_RULE)
 AC_SUBST(DEF_MAKE_RULE)
 Py_OPT='false'
 AC_MSG_CHECKING(for --enable-optimizations)
-AC_ARG_ENABLE(optimizations, AS_HELP_STRING([--enable-optimizations], [Enable expensive optimizations (PGO, maybe LTO, etc).  Disabled by default.]),
+AC_ARG_ENABLE(optimizations, AS_HELP_STRING([--enable-optimizations], [Enable expensive optimizations (PGO, etc).  Disabled by default.]),
 [
 if test "$enableval" != no
 then
@@ -1987,7 +1987,7 @@ yes)
 	extra_machdep_objs="Python/mactoolboxglue.o"
 	extra_undefs="-u _PyMac_Error"
 	AC_DEFINE(USE_TOOLBOX_OBJECT_GLUE, 1,
-         [Define if you want to use MacPython modules on MacOSX in unix-Python.])
+         [Define if you want to use MacTauthon modules on MacOSX in unix-Tauthon.])
 	;;
 *)
 	extra_machdep_objs=""
@@ -2143,7 +2143,7 @@ AC_DEFINE_UNQUOTED(SHLIB_EXT, "$SO", [Define this to be extension of shared libr
 # LDSHARED is the ld *command* used to create shared library
 # -- "cc -G" on SunOS 5.x, "ld -shared" on IRIX 5
 # (Shared libraries in this instance are shared modules to be loaded into
-# Python, as opposed to building Python itself as a shared library.)
+# Tauthon, as opposed to building Tauthon itself as a shared library.)
 AC_MSG_CHECKING(LDSHARED)
 if test -z "$LDSHARED"
 then
@@ -2183,7 +2183,7 @@ then
 			LDSHARED="$LDSHARED "'$(PYTHONFRAMEWORKPREFIX)/$(PYTHONFRAMEWORKDIR)/Versions/$(VERSION)/$(PYTHONFRAMEWORK)'
 			LDCXXSHARED="$LDCXXSHARED "'$(PYTHONFRAMEWORKPREFIX)/$(PYTHONFRAMEWORKDIR)/Versions/$(VERSION)/$(PYTHONFRAMEWORK)'
 		else
-			# No framework. Ignore undefined symbols, assuming they come from Python
+			# No framework. Ignore undefined symbols, assuming they come from Tauthon
 			LDSHARED="$LDSHARED -undefined suppress"
 			LDCXXSHARED="$LDCXXSHARED -undefined suppress"
 		fi ;;
@@ -2196,14 +2196,14 @@ then
 			LDSHARED="$LDSHARED "'$(PYTHONFRAMEWORKPREFIX)/$(PYTHONFRAMEWORKDIR)/Versions/$(VERSION)/$(PYTHONFRAMEWORK)'
 			LDCXXSHARED="$LDCXXSHARED "'$(PYTHONFRAMEWORKPREFIX)/$(PYTHONFRAMEWORKDIR)/Versions/$(VERSION)/$(PYTHONFRAMEWORK)'
 		else
-			# No framework, use the Python app as bundle-loader
-			BLDSHARED="$LDSHARED "'-bundle_loader $(BUILDPYTHON)'
-			LDSHARED="$LDSHARED "'-bundle_loader $(BINDIR)/python$(VERSION)$(EXE)'
-			LDCXXSHARED="$LDCXXSHARED "'-bundle_loader $(BINDIR)/python$(VERSION)$(EXE)'
+			# No framework, use the Tauthon app as bundle-loader
+			BLDSHARED="$LDSHARED "'-bundle_loader $(BUILDTAUTHON)'
+			LDSHARED="$LDSHARED "'-bundle_loader $(BINDIR)/tauthon$(VERSION)$(EXE)'
+			LDCXXSHARED="$LDCXXSHARED "'-bundle_loader $(BINDIR)/tauthon$(VERSION)$(EXE)'
 		fi ;;
 	Darwin/*)
 		# Use -undefined dynamic_lookup whenever possible (10.3 and later).
-		# This allows an extension to be used in any Python
+		# This allows an extension to be used in any Tauthon
 
 		dep_target_major=`echo ${MACOSX_DEPLOYMENT_TARGET} | \
 				sed 's/\([[0-9]]*\)\.\([[0-9]]*\).*/\1/'`
@@ -2221,10 +2221,10 @@ then
 				LDSHARED="$LDSHARED "'$(PYTHONFRAMEWORKPREFIX)/$(PYTHONFRAMEWORKDIR)/Versions/$(VERSION)/$(PYTHONFRAMEWORK)'
 				LDCXXSHARED="$LDCXXSHARED "'$(PYTHONFRAMEWORKPREFIX)/$(PYTHONFRAMEWORKDIR)/Versions/$(VERSION)/$(PYTHONFRAMEWORK)'
 			else
-				# No framework, use the Python app as bundle-loader
-				BLDSHARED="$LDSHARED "'-bundle_loader $(BUILDPYTHON)'
-				LDSHARED="$LDSHARED "'-bundle_loader $(BINDIR)/python$(VERSION)$(EXE)'
-				LDCXXSHARED="$LDCXXSHARED "'-bundle_loader $(BINDIR)/python$(VERSION)$(EXE)'
+				# No framework, use the Tauthon app as bundle-loader
+				BLDSHARED="$LDSHARED "'-bundle_loader $(BUILDTAUTHON)'
+				LDSHARED="$LDSHARED "'-bundle_loader $(BINDIR)/tauthon$(VERSION)$(EXE)'
+				LDCXXSHARED="$LDCXXSHARED "'-bundle_loader $(BINDIR)/tauthon$(VERSION)$(EXE)'
 			fi
 		else
 			# building for OS X 10.3 and later
@@ -2327,7 +2327,7 @@ then
 fi
 AC_MSG_RESULT($CCSHARED)
 # LINKFORSHARED are the flags passed to the $(CC) command that links
-# the python executable -- this is only needed for a few systems
+# the tauthon executable -- this is only needed for a few systems
 AC_MSG_CHECKING(LINKFORSHARED)
 if test -z "$LINKFORSHARED"
 then
@@ -2346,7 +2346,7 @@ then
 		# that dynamically loaded extension modules have access to it.
 		# -prebind is no longer used, because it actually seems to give a
 		# slowdown in stead of a speedup, maybe due to the large number of
-		# dynamic loads Python does.
+		# dynamic loads Tauthon does.
 
 		LINKFORSHARED="$extra_undefs"
 		if test "$enable_framework"
@@ -2401,12 +2401,12 @@ then
 fi
 AC_MSG_RESULT($CFLAGSFORSHARED)
 
-# SHLIBS are libraries (except -lc and -lm) to link to the python shared
+# SHLIBS are libraries (except -lc and -lm) to link to the tauthon shared
 # library (with --enable-shared).
 # For platforms on which shared libraries are not allowed to have unresolved
 # symbols, this must be set to $(LIBS) (expanded by make). We do this even
 # if it is not required, since it creates a dependency of the shared library
-# to LIBS. This, in turn, means that applications linking the shared libpython
+# to LIBS. This, in turn, means that applications linking the shared libtauthon
 # don't need to link LIBS explicitly. The default should be only changed
 # on systems where this approach causes problems.
 AC_SUBST(SHLIBS)
@@ -2998,7 +2998,7 @@ then
 fi
 AC_MSG_RESULT($with_doc_strings)
 
-# Check for Python-specific malloc support
+# Check for Tauthon-specific malloc support
 AC_MSG_CHECKING(for --with-tsc)
 AC_ARG_WITH(tsc,
 	    AS_HELP_STRING([--with(out)-tsc],[enable/disable timestamp counter profile]),[
@@ -3011,7 +3011,7 @@ else AC_MSG_RESULT(no)
 fi],
 [AC_MSG_RESULT(no)])
 
-# Check for Python-specific malloc support
+# Check for Tauthon-specific malloc support
 AC_MSG_CHECKING(for --with-pymalloc)
 AC_ARG_WITH(pymalloc,
             AS_HELP_STRING([--with(out)-pymalloc], [disable/enable specialized mallocs]))
@@ -3022,7 +3022,7 @@ fi
 if test "$with_pymalloc" != "no"
 then
     AC_DEFINE(WITH_PYMALLOC, 1, 
-     [Define if you want to compile in Python-specific mallocs])
+     [Define if you want to compile in Tauthon-specific mallocs])
 fi
 AC_MSG_RESULT($with_pymalloc)
 
@@ -3048,7 +3048,7 @@ if test "$withval" != no
 then 
   AC_DEFINE(WANT_WCTYPE_FUNCTIONS, 1,
   [Define if you want wctype.h functions to be used instead of the
-   one supplied by Python itself. (see Include/unicodectype.h).]) 
+   one supplied by Tauthon itself. (see Include/unicodectype.h).]) 
   AC_MSG_RESULT(yes)
 else AC_MSG_RESULT(no)
 fi],
@@ -3097,7 +3097,7 @@ then
         [Defined when any dynamic module loading is enabled.])
 fi
 
-# MACHDEP_OBJS can be set to platform-specific object files needed by Python
+# MACHDEP_OBJS can be set to platform-specific object files needed by Tauthon
 
 AC_SUBST(MACHDEP_OBJS)
 AC_MSG_CHECKING(MACHDEP_OBJS)
@@ -3242,7 +3242,7 @@ AC_CHECK_LIB(c, inet_aton, [$ac_cv_prog_TRUE],
 )
 
 # On Tru64, chflags seems to be present, but calling it will
-# exit Python
+# exit Tauthon
 AC_CACHE_CHECK([for chflags], [ac_cv_have_chflags], [dnl
 AC_RUN_IFELSE([AC_LANG_SOURCE([[
 #include <sys/stat.h>
@@ -3882,7 +3882,7 @@ then
 fi
 
 # Some ARM platforms use a mixed-endian representation for doubles.
-# While Python doesn't currently have full support for these platforms
+# While Tauthon doesn't currently have full support for these platforms
 # (see e.g., issue 1762561), we can at least make sure that float <-> string
 # conversions work.
 AC_MSG_CHECKING(whether C doubles are ARM mixed-endian IEEE 754 binary64)
@@ -4082,10 +4082,10 @@ then
   [define to 1 if your sem_getvalue is broken.])
 fi
 
-# determine what size digit to use for Python's longs
-AC_MSG_CHECKING([digit size for Python's longs])
+# determine what size digit to use for Tauthon's longs
+AC_MSG_CHECKING([digit size for Tauthon's longs])
 AC_ARG_ENABLE(big-digits,
-AS_HELP_STRING([--enable-big-digits@<:@=BITS@:>@],[use big digits for Python longs [[BITS=30]]]),
+AS_HELP_STRING([--enable-big-digits@<:@=BITS@:>@],[use big digits for Tauthon longs [[BITS=30]]]),
 [case $enable_big_digits in
 yes)
   enable_big_digits=30 ;;
@@ -4257,7 +4257,7 @@ then
 fi
 
 # check where readline lives
-# save the value of LIBS so we don't actually link Python with readline
+# save the value of LIBS so we don't actually link Tauthon with readline
 LIBS_no_readline=$LIBS
 
 # On some systems we need to link readline to a termcap compatible
@@ -4960,7 +4960,7 @@ if test "$Py_OPT" = 'false' -a "$Py_DEBUG" != 'true'; then
     echo "" >&AS_MESSAGE_FD
     echo "" >&AS_MESSAGE_FD
     echo "If you want a release build with all optimizations active (LTO, PGO, etc),"
-    echo "please run ./configure --enable-optimizations" >&AS_MESSAGE_FD
+    echo "please run ./configure --enable-optimizations --with-lto" >&AS_MESSAGE_FD
     echo "" >&AS_MESSAGE_FD
     echo "" >&AS_MESSAGE_FD
 fi
